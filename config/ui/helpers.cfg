
// CoSinusoidal Transition Functions
// arg1 : TIME INDEX  | The current point in time, modulated by the WAVELENGTH
// arg2 : WAVELENGTH  | Measured in millis, controls the length of a full cycle
// arg3 : Y FORMAT    | Adjusts the Y output to different formats as below:
//   -1 = Goes from 1 to -1 to 1 in a full cycle
//    0 = Goes from 1 to  0 to 1 in a full cycle
//    1 = Same as the previous, but goes negative every other cycle
// The `sinwave` version will have opposite values from `coswave`
coswave = [
	if $arg2 [
		local x y
		x = (modf (*f 180 (divf $arg1 $arg2)) 720)
		if (>= $arg3 0) [
			y = (+f 0.5 (*f 0.5 (cos $x)))
			if (&& $arg3 [<f 180 $x 540]) [ y = (!f $y) ]
			result $y
		] [ cos $x ]
	] [ result 1 ]
]

sinwave = [
	if $arg2 [
		local x y
		x = (modf (*f 180 (divf $arg1 $arg2)) 720)
		if (>= $arg3 0) [
			y = (+f 0.5 (*f 0.5 (sin $x)))
			if (&& $arg3 [<f 180 $x 540]) [ y = (!f $y) ]
			result $y
		] [ sin $x ]
	] [ result 0 ]
]

// cosbounce/sinbounce  VALUE  WAVELENGTH
// multiplies VALUE through the [-1] return value of a cos/sin wave function
// useful for making bouncing elements inside of UIs particularly
cosbounce = [ *f $arg1 (coswave (abs $getmillis) $arg2 -1) ]
sinbounce = [ *f $arg1 (sinwave (abs $getmillis) $arg2 -1) ]

// coswave:INT  INT1  INT2  rep-millis  custom-X  Y-FORMAT
// less than 4 parameters assumes ALUI timestamp use, supply arg4 otherwise
coswave:INT = [
	if (< $numargs 4) [ arg4 = (UIcoswave $arg3) ] [
		arg4 = (coswave (abs $arg4) $arg3 $arg5)
	]

	local r1 g1 b1 r2 g2 b2
	INT>RGB $arg1 [ r1 = $r ; g1 = $g ; b1 = $b ]
	INT>RGB $arg2 [ r2 = $r ; g2 = $g ; b2 = $b ]

	RGB>INT (
		round (+f $r2 (*f (- $r2 $r1) -1 $arg4))
	) (
		round (+f $g2 (*f (- $g2 $g1) -1 $arg4))
	) (
		round (+f $b2 (*f (- $b2 $b1) -1 $arg4))
	)
]

// coswave:RGB  R1 G1 B1  R2 G2 B2  rep-millis  custom-X  Y-FORMAT
// less than 8 parameters assumes ALUI timestamp use, supply arg4 otherwise
coswave:RGB = [
	if (< $numargs 8) [ arg8 = (UIcoswave $arg7) ] [
		arg8 = (coswave (abs $arg8) $arg7 $arg9)
	]

	RGB>INT (
		round (+f $arg4 (*f (- $arg4 $arg1) -1 $arg8))
	) (
		round (+f $arg5 (*f (- $arg5 $arg2) -1 $arg8))
	) (
		round (+f $arg6 (*f (- $arg6 $arg3) -1 $arg8))
	)
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  DEBUG MENUS BELOW                                                                                       //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

UImenu "symbols_test" [
	uigrid 26 0 0 [
		looplist n [
			a b c d e f g h i j k l m n o
			p q r s t u v w x y z A B C D
			E F G H I J K L M N O P Q R S
			T U V W X Y Z 1 2 3 4 5 6 7 8
			9 0 ` ~ - _ = + { } "[" "]" \
			| ";" : ' "^"" , < . > / ? !
			"@" # $ % & * "(" ")"
		] [
			uivlist 0 [ 
				uifonttext "mono" $n 1.5
				uifontcolortext "webdings" $n $c_yellow 1.5
			]
		]
	]
] [] [] [] [ uitext "Webdings Debug" 0.8 ]

UImenu "coswave_test" [
	uigrid 2 $uiPad:L $uiPad:L [
		UIhslider .wavelength 200 10000 200 [] [] $uiPad:D3XL $uiPad:6XL
		uispace $uiPad:L 0 [
			uihlist 0 [
				uitext (UIcoswave $.wavelength) 0.6
				uitext (concatword (+ (round (*f 100 (UIcoswave $.wavelength))) 0) "^%") 0.8
			] ; uiclamp-x
		] ; uiclamp-x
		uicolor (coswave:RGB 255 10 20 120 100 230 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (UIcoswave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
		uicolor (coswave:INT 0x7864E6 0xFF0A14 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (UIcoswave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
	]
] [ .wavelength = 2000 ] [] [] [ uitext "Wave Function Debug" 0.8 ]

UImenu "slider_test" [
	uihlist $uiPad:L [
		uifill 0.2 0.2 [
			uivlist 0 [
				uiclamp.e
				UIhspectrumslider a 0 255
				UIhslider b 0 255 1
				UIhcolorslider c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
		uifill 0.2 0.2 [
			uihlist 0 [
				uiclamp.e
				UIvspectrumslider a 0 255
				UIvslider b 0 255 1
				UIvcolorslider c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
	]
] [
	a = 0
	b = 0
	c = 0
] [] [] [ uitext "Sliders Debug" 0.8 ]

UImenu "field_test" [
	uivlist 0 [
		UIadvfieldLA text1 16 0.6 "" [] [] 0.2 $uiPad:5XL
		UIadvfieldCA text2 16 0.6 "" [] [] 0.2 $uiPad:5XL
		UIadvfieldRA text3 16 0.6 "" [] [] 0.2 $uiPad:5XL
		UIbar 1 0 $uiPad:L $uiPad:L
		UIadvfieldRAint num1 -9999  9999 0.6 [] [] 0.2 $uiPad:5XL
		UIadvfieldRAint num2 -9999    -1 0.6 [] [] 0.2 $uiPad:5XL
		UIadvfieldRAint num3     1  9999 0.6 [] [] 0.2 $uiPad:5XL
	]
] [
	text1 = left-aligned
	text2 = center-aligned
	text3 = right-aligned
	num1 =  0
	num2 = -1
	num3 =  1
] [] [] [ uitext "Text/Int Fields Debug" 0.8 ]

UImenu "drag_test" [
	UIbox "box n n n d n" $.box_size $.box_size [
		// XXX
	]
	uivlist 0 [
		uialign -1 -1
		uifonttext "mono" (format "Current X:%1 | Y:%2" (pad0 (pad0f $.x  4) 8 " ") (pad0 (pad0f $.y  4) 8 " ")) 0.5
		uifonttext "mono" (format "Saved X:%1 | Y:%2"   (pad0 (pad0f $.cx 4) 8 " ") (pad0 (pad0f $.cy 4) 8 " ")) 0.5
		uialign* 1
	]
	uicolor 0x80FF0000 $.obj_size $.obj_size
	uioffset (+f $.x $.box_edge) (+f $.y $.box_edge) [
		uialign -1 -1
		uicolor (? $uihover+? 0x10D080 0xFF8010) $.obj_size $.obj_size [
			if $uihold? [
				.x = (+f (precf (*f $uimousetrackx $uiaspect) 4) $.cx)
				.y = (+f (precf     $uimousetracky            4) $.cy)
				if (<=f (!f $.box_edge) $.x $.box_edge) [] [
					uilockcursorx ; .x = (clampf $.x (!f $.box_edge) $.box_edge)
				]
				if (<=f (!f $.box_edge) $.y $.box_edge) [] [
					uilockcursory ; .y = (clampf $.y (!f $.box_edge) $.box_edge)
				]
			] [ .cx = $.x ; .cy = $.y ]
		]
	]
] [
	.obj_size = 0.01
	.box_size = 0.8
	.box_edge = (-f (*f $.box_size 0.5) (*f $.obj_size 0.5))
	.x = 0.0
	.y = 0.0
	.cx = 0.0
	.cy = 0.0
] [] [] [ uitext "Mouse Drag Track Debug" 0.8 ]

UImenu "setmapmode" [
	uigrid 8 $uiPad:L 0 [
		loop n (listlen $modelist) [
			if $n [ uitext (at $modelist $n) 0.6 ] uifill
		]
		loop+* i 1 2 (div (listlen $defmaptable) 2) [
			UIbutton "none" [ uitext (at $defmaptable (- $i 1)) 0.6 ]
			loop n (- (listlen $modelist) 1) [
				UIbuttonarea "hold2" $uiPad:5XL $uiPad:5XL [
					uialign 0
					UIcheckbox (& (at $defmaptable $i) (<< 1 $n))
					uirelease [
						defmaptable = (listsplice $defmaptable (^ (at $defmaptable $i) (<< 1 $n)) $i 1)
					]
				]
			]
		]
	]
] [] [] [] [ uitext "Map Gamemode Debug" 0.8 ]

UImenu "translate_test" [
	uivlist 0 [
		uifill $uiPad:UM
		UIoptionslider .UI_lang [
			0 @(.tl "English" defstr) -1
			1 @(.tl "Italian" defstr) -1
			2 @(.tl "German"  defstr) -1
			3 @(.tl "French"  defstr) -1
			4 @(.tl "Spanish" defstr) -1
		]
		uiclamp-e
		uifill 0 $uiPad:3XL
		uitext (.tl "This is a short line of amazing test!") 0.6
		uitext (.tl "Five dogs were harmed in the making of this game.") 0.6
		uitext (.tl "You must believe in the heart of the cards.") 0.6
		uitext (.tl "This line of text is intentionally untranslated.") 0.6
	]
] [
	.UI_lang = 0
	.tl_table = [
		"translate_test" [
			"This is a short line of amazing test!" [
				"Questa è una breve linea di prova incredibile!"
				"Dies ist eine kurze Reihe erstaunlicher Tests!"
				"Ceci est une courte ligne de test incroyable!"
				"Esta es una línea corta de prueba increíble!"
			]
			"Five dogs were harmed in the making of this game." [
				"Cinque cani sono stati feriti durante la realizzazione di questo gioco."
				"Fünf Hunde wurden bei der Entwicklung dieses Spiels verletzt."
				"Cinq chiens ont été blessés lors de la réalisation de ce jeu."
				"Cinco perros resultaron heridos durante la creación de este juego."
			]
			"You must believe in the heart of the cards." [
				"Devi credere nel cuore delle carte."
				"Sie müssen an das Herz der Karten glauben."
				"Vous devez croire au cœur des cartes."
				"Debes creer en el corazón de las cartas."
			]
		]
		"defstr" [
			"English" ["Inglese"  "Englisch"    "Anglais"  "Inglés"]
			"Italian" ["Italiano" "Italienisch" "Italien"  "Italiano"]
			"German"  ["Tedesco"  "Deutsch"     "Allemand" "Alemán"]
			"French"  ["Francese" "Französisch" "Français" "Francés"]
			"Spanish" ["Spagnolo" "Spanisch"    "Espagnol" "Español"]
		]
	]

	// usage: (.tl  "STRING"  <optional UI name>)
	.tl = [
		// if given arg2, use it as UI name
		if $arg2 [] [ arg2 = $uiname ]
		// index of UI name block
		arg3 = (indexof $.tl_table $arg2)
		// string block for given UI name
		arg4 = (at $.tl_table (+ $arg3 1))
		// string match in block
		arg5 = (indexof $arg4 $arg1)

		if $.UI_lang [
			if (&& [> $arg3 -1] [> $arg5 -1]) [
				at $arg4 (+ $arg5 1) (- $.UI_lang 1)
			] [ concatword "^f3" $arg1 ]
		] [ result $arg1 ]
	]
] [] [] [ uitext "Translation Debug" 0.8 ]

