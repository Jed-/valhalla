
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Convenience Color Op Functions                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Add alpha value (arg1) to a given color INT (arg2)
|A  = [ | (<< (& $arg1 0xFF) 24) $arg2 ]
// Add alpha value (arg1) to a given color INT (arg2), subtracted from white
|A! = [ | (<< (& $arg1 0xFF) 24) (- $c_white $arg2) ]

// convert given INT into <mad> texcmd format
mad = [ INT>RGB $arg1 [
	concatword < mad: (divf $r 255) / (divf $g 255) / (divf $b 255) >
] ]

// convert rounded value range 0..1 into <fade> texcmd format
fade = [
	if (< $numargs 2) [ arg1 = (round $arg1 0.1) ] [
		if $arg2 [ arg1 = (round $arg1 $arg2) ]
	] ; concatword < fade: $arg1 >
]

// convert given INT into <mad> texcmd format
intmul = [ concatword < intmul: (+ $arg1) > ]

// convert value range 0..1 back to 0..255 range
aFF  = [ max 1 (round (*f $arg1 (? $arg2 $arg2 255))) ]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  INT> Color Convert & Transformation Functions                                                           //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Splits INT color and returns composite ARGB format
// usage: /INT>ARGB #INT [ action ]
// ARGB variables: $a $r $g $b
INT>ARGB = [
	local a r g b
	arg1 = (& $arg1 0xFFFFFFFF)
	a =    (>> $arg1 24)
	r = (& (>> $arg1 16) 0xFF)
	g = (& (>> $arg1  8) 0xFF)
	b = (&     $arg1     0xFF)
	if (=s $arg2 "") [ concat $a $r $g $b ] [ doargs $arg2 ]
]

// Splits INT color and returns composite RGB format
// usage: /INT>RGB #INT [ action ]
// RGB variables: $r $g $b
INT>RGB = [
	local r g b
	arg1 = (& $arg1 0xFFFFFF)
	r = (& (>> $arg1 16) 0xFF)
	g = (& (>> $arg1  8) 0xFF)
	b = (&     $arg1     0xFF)
	if (=s $arg2 "") [ concat $r $g $b ] [ doargs $arg2 ]
]

// Applies modifier to all color channels of INT color
// usage: /INT:TRANS #INT MATH-OP MOD-VALUE [ action ]
// RGB variables: $r $g $b
INT:TRANS = [
	INT>RGB $arg1 [
		r = (clamp ($arg2 $r $arg3) 0 0xFF)
		g = (clamp ($arg2 $g $arg3) 0 0xFF)
		b = (clamp ($arg2 $b $arg3) 0 0xFF)
		RGB>INT $r $g $b
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  RGB> and ARGB> Color Convert & Transformation Functions                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Combine RGB channels and return INT value
// usage: /RGB>INT #R #G #B [ action ]
// INT variables (separate): $r $g $b
RGB>INT = [
	local r g b
	r = (<< (& $arg1 0xFF) 16)
	g = (<< (& $arg2 0xFF)  8)
	b =     (& $arg3 0xFF)
	if (=s $arg4 "") [ + $r $g $b ] [ doargs $arg4 ]
]

// Combine ARGB channels and return INT value
// usage: /ARGB>INT #A #R #G #B [ action ]
// INT variables (separate): $a $r $g $b
ARGB>INT = [
	local a r g b
	a = (<< (& $arg1 0xFF) 24)
	r = (<< (& $arg2 0xFF) 16)
	g = (<< (& $arg3 0xFF)  8)
	b =     (& $arg4 0xFF)
	if (=s $arg5 "") [ + $a $r $g $b ] [ doargs $arg5 ]
]

// Combine RGB channels and return INT value in HEX format
// usage: /RGB>HEX #R #G #B [ action ]
// HEX variables: $hex
RGB>HEX = [
	local hex
	hex = (tohex (RGB>INT $arg1 $arg2 $arg3) 6)
	if (=s $arg4 "") [ result $hex ] [ doargs $arg4 ]
]

// Combine ARGB channels and return INT value in HEX format
// usage: /ARGB>HEX #A #R #G #B [ action ]
// HEX variables: $hex
ARGB>HEX = [
	local hex
	hex = (tohex (ARGB>INT $arg1 $arg2 $arg3 $arg4) 8)
	if (=s $arg5 "") [ result $hex ] [ doargs $arg5 ]
]

// Applies modifier to all color channels of RGB color
// usage: /INT:TRANS #R #G #B MATH-OP MOD-VALUE [ action ]
// RGB variables: $r $g $b
RGB:TRANS = [
	local r g b
	r = (clamp ($arg4 (& $arg1 0xFF) $arg5) 0 0xFF)
	g = (clamp ($arg4 (& $arg2 0xFF) $arg5) 0 0xFF)
	b = (clamp ($arg4 (& $arg3 0xFF) $arg5) 0 0xFF)
	if (=s $arg6 "") [ concat $r $g $b ] [ doargs $arg6 ]
]

// Applies modifier to all color channels of RGB color
// usage: /INT:TRANS #A #R #G #B MATH-OP MOD-VALUE [ action ]
// RGB variables: $r $g $b
RGB:TRANS = [
	local a r g b
	a = (clamp ($arg5 (& $arg1 0xFF) $arg6) 0 0xFF)
	r = (clamp ($arg5 (& $arg2 0xFF) $arg6) 0 0xFF)
	g = (clamp ($arg5 (& $arg3 0xFF) $arg6) 0 0xFF)
	b = (clamp ($arg5 (& $arg4 0xFF) $arg6) 0 0xFF)
	if (=s $arg7 "") [ concat $a $r $g $b ] [ doargs $arg7 ]
]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  HSV Color Convert Functions                                                                             //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Transform RGB channels and return composite HSV data
// usage: /RGB>HSV #R #G #B [ action ]
// HSV variables: $h $s $v
RGB>HSV = [
	local r g b mn d h s v
	r  = (divf (& $arg1 0xFF) 255)
	g  = (divf (& $arg2 0xFF) 255)
	b  = (divf (& $arg3 0xFF) 255)
	v  = (maxf $r $g $b)
	mn = (minf $r $g $b)
	if (=f $mn $v) [
		d = 0
		h = 0
		s = 0
	] [
		d = (-f $v $mn)
		s = (divf $d $v)
		h = (floor (casef $v $r [
			*f 60 (modf (divf (-f $g $b) $d) 6)
		] $g [
			*f 60 (+f (divf (-f $b $r) $d) 2)
		] $b [
			*f 60 (+f (divf (-f $r $g) $d) 4)
		]))
	]
	if (=s $arg4 "") [ concat $h $s $v ] [ doargs $arg4 ]
]

// Transform HSV data and return composite RGB data
// usage: /HSV>RGB #H #S #V [ action ]
// RGB variables: $r $g $b
HSV>RGB = [
	local c x m h r g b
	c = (*f $arg3 $arg2)
	x = (*f $c (-f 1 (absf (-f (modf (divf $arg1 60) 2) 1))))
	m = (-f $arg3 $c)
	h = (div $arg1 60)
	r = (round (*f 255 (+f (at [@c @x 0 0 @x @c] $h) $m)))
	g = (round (*f 255 (+f (at [@x @c @c @x 0 0] $h) $m)))
	b = (round (*f 255 (+f (at [0 0 @x @c @c @x] $h) $m)))
	if (=s $arg4 "") [ concat $r $g $b ] [ doargs $arg4 ]
]

// Transform INT color and return composite HSV data
// usage: /RGB>HSV #R #G #B [ action ]
// HSV variables: $h $s $v
INT>HSV = [ INT>RGB $arg1 [ RGB>HSV $r $g $b $arg2 ] ]
