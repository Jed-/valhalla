
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Convenience Color Op Functions                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Add alpha value (arg1) to a given color INT (arg2)
|A  = [ | (<< (& $arg1 0xFF) 24) $arg2 ]
// Add alpha value (arg1) to a given color INT (arg2), subtracted from white
|A! = [ | (<< (& $arg1 0xFF) 24) (- 0xFFFFFF $arg2) ]

// convert given INT into <mad> texcmd format
mad = [ INT>RGB $arg1 [
    +s < mad: (/f $r 255) / (/f $g 255) / (/f $b 255) >
] ]

// convert rounded value range 0..1 into <fade> texcmd format
fade = [
    if (< $numargs 2) [ arg1 = (round $arg1 0.1) ] [
        if $arg2 [ arg1 = (round $arg1 $arg2) ]
    ] ; +s < fade: $arg1 >
]

// convert given INT into <mad> texcmd format
intmul = [ +s < intmul: (+ $arg1) > ]

// convert 0.0-1.0 range value to 1..255 (default) range value
*fA  = [
    if $arg2 [] [ arg2 = 255 ]
    max 1 (round (*f $arg1 $arg2))
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  INT> Color Convert & Transformation Functions                                                           //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Splits INT color and returns composite ARGB color
// usage: /INT>ARGB #INT [ action ]
// ARGB variables: $a $r $g $b
INT>ARGB = [
    local a r g b
    a = (& (>> $arg1 24) 0xFF)
    r = (& (>> $arg1 16) 0xFF)
    g = (& (>> $arg1  8) 0xFF)
    b = (&     $arg1     0xFF)
    if (=s $arg2 "") [ concat $a $r $g $b ] [ doargs $arg2 ]
]

// Splits INT color and returns composite RGB color
// usage: /INT>RGB #INT [ action ]
// RGB variables: $r $g $b
INT>RGB = [
    local r g b
    arg1 = (& $arg1 0xFFFFFF)
    r = (& (>> $arg1 16) 0xFF)
    g = (& (>> $arg1  8) 0xFF)
    b = (&     $arg1     0xFF)
    if (=s $arg2 "") [ concat $r $g $b ] [ doargs $arg2 ]
]

// Applies modifier to all color channels of INT color
// usage: /INT:TRANS #INT MATH-OP MOD-VALUE [ action ]
// RGB variables: $r $g $b
INT:TRANS = [
    INT>RGB $arg1 [
        r = (clamp ($arg2 $r $arg3) 0 0xFF)
        g = (clamp ($arg2 $g $arg3) 0 0xFF)
        b = (clamp ($arg2 $b $arg3) 0 0xFF)
        RGB>INT $r $g $b $arg4
    ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  RGB> and ARGB> Color Convert & Transformation Functions                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Combine RGB color channels and return INT color
// usage: /RGB>INT #R #G #B [ action ]
// INT variables (separate): $r $g $b
RGB>INT = [
    local r g b
    r = (<< (min $arg1 0xFF) 16)
    g = (<< (min $arg2 0xFF)  8)
    b =     (min $arg3 0xFF)
    if (=s $arg4 "") [ + $r $g $b ] [ doargs $arg4 ]
]

// Combine ARGB color channels and return INT color
// usage: /ARGB>INT #A #R #G #B [ action ]
// INT variables (separate): $a $r $g $b
ARGB>INT = [
    local a r g b
    a = (<< (min $arg1 0xFF) 24)
    r = (<< (min $arg2 0xFF) 16)
    g = (<< (min $arg3 0xFF)  8)
    b =     (min $arg4 0xFF)
    if (=s $arg5 "") [ + $a $r $g $b ] [ doargs $arg5 ]
]

// Applies modifier to all channels of RGB color
// usage: /RGB:TRANS #R #G #B MATH-OP MOD-VALUE [ action ]
// RGB variables: $r $g $b
RGB:TRANS = [
    local r g b
    r = (clampf ($arg4 (min $arg1 0xFF) $arg5) 0 0xFF)
    g = (clampf ($arg4 (min $arg2 0xFF) $arg5) 0 0xFF)
    b = (clampf ($arg4 (min $arg3 0xFF) $arg5) 0 0xFF)
    if (=s $arg6 "") [ concat $r $g $b ] [ doargs $arg6 ]
]

// Applies modifier to all channels of ARGB color
// usage: /ARGB:TRANS #A #R #G #B MATH-OP MOD-VALUE [ action ]
// ARGB variables: $a $r $g $b
ARGB:TRANS = [
    local a r g b
    a = (clampf ($arg5 (min $arg1 0xFF) $arg6) 0 0xFF)
    r = (clampf ($arg5 (min $arg2 0xFF) $arg6) 0 0xFF)
    g = (clampf ($arg5 (min $arg3 0xFF) $arg6) 0 0xFF)
    b = (clampf ($arg5 (min $arg4 0xFF) $arg6) 0 0xFF)
    if (=s $arg7 "") [ concat $a $r $g $b ] [ doargs $arg7 ]
]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  HSV Color Convert Functions                                                                             //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Transform RGB color and return composite HSV data
// usage: /RGB>HSV #R #G #B [ action ]
// HSV variables: $h $s $v
RGB>HSV = [
    local r g b L D h s v
    r = (/f (& $arg1 0xFF) 255)
    g = (/f (& $arg2 0xFF) 255)
    b = (/f (& $arg3 0xFF) 255)
    v = (maxf $r $g $b)
    L = (minf $r $g $b)
    if (!=f $L $v) [
        D = (-f $v $L)
        s = (/f $D $v)
        casef $v $r [
            h = (modf (/f (-f $g $b) $D) 6)
        ] $g [
            h = (+f   (/f (-f $b $r) $D) 2)
        ] $b [
            h = (+f   (/f (-f $r $g) $D) 4)
        ] ; h = (round (*f $h 60))
    ] [ h = 0 ; s = 0 ]
    if (=s $arg4 "") [ concat $h $s $v ] [ doargs $arg4 ]
]

// Transform HSV data and return composite RGB color
// usage: /HSV>RGB #H #S #V [ action ]
// RGB variables: $r $g $b
HSV>RGB = [
    local C H X L r g b
    C = (*f $arg3 $arg2)
    H = (/f $arg1 60)
    X = (*f $C (-f 1 (absf (-f (modf $H 2) 1))))
    L = (-f $arg3 $C)
    r = (round (*f 255 (+f (at (concat $C $X  0  0 $X $C) $H) $L)))
    g = (round (*f 255 (+f (at (concat $X $C $C $X  0  0) $H) $L)))
    b = (round (*f 255 (+f (at (concat  0  0 $X $C $C $X) $H) $L)))
    if (=s $arg4 "") [ concat $r $g $b ] [ doargs $arg4 ]
]

// Transform INT color and return composite HSV data
// usage: /INT>HSV #INT [ action ]
// HSV variables: $h $s $v
INT>HSV = [ INT>RGB $arg1 [ RGB>HSV $r $g $b $arg2 ] ]
