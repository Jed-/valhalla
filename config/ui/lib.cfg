
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                    UI  LIBRARY  LEGEND                                             //
//                                                                                    //
//  #0  assortment of various shorthand convenience functions                         //
//  #1  menu, panel, stddialog, quickdialog & title buttons                           //
//  #2  fastimg(tile), bar, triangle, circle, checkbox, radio, arrowbutton & keybox   //
//  #3  settip, cleartip, hoveronce, hoversound, scrollsound                          //
//      coswave, sinwave, setshelf, tabaction & setblurbg                             //
//  #4  basicfield, basiceditor, tooltipbox                                           //
//  #5  box, buttonarea, button & fancytext                                           //
//  #6  sliders, colorsliders, spectrumsliders & barslider                            //
//  #7  scrollbars, optionslider & wrapperslider                                      //
//  #8  HUD: hudcell, hudcellslider, entcell, entcolor12/24                           //
//  #9  KB HOOK: advfieldLA/RA/CA, helper funcs KBclean & KBinput                     //
//  #10  OTHERS: clock(hand), server, activetable & optrow                            //
//                                                                                    //
//   ui*    hardcoded & shorthand (custom) functions                                  //
//   UI*    custom functions & variables                                              //
//                                                                                    //
//   But why the :var: and .var scheme?                                               //
//                                                                                    //
//       The former you really should not be touching unless you know and understand  //
//         what they're meant to represent and *do* -- you'll likely break things.    //
//                                                                                    //
//       The latter are meant to stay away from typical command tab-completion, and   //
//         can represent placeholders of hardcoded vars too. You still should not     //
//         touch them, but the chances of breaking anything important are lesser.     //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #0  assortment of various shorthand convenience functions                                               //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

uiclamp.x = [ uiclamp  1 1 0 0 ]
uiclamp.y = [ uiclamp  0 0 1 1 ]
uiclamp.e = [ uiclamp  1 1 1 1 ]
uiclamp-x = [ uiclamp- 1 1 0 0 ]
uiclamp-y = [ uiclamp- 0 0 1 1 ]
uiclamp-e = [ uiclamp- 1 1 1 1 ]
uiclamp*x = [ uiclamp* 1 1 0 0 ]
uiclamp*y = [ uiclamp* 0 0 1 1 ]
uiclamp*e = [ uiclamp* 1 1 1 1 ]

uifonttext      = [ uifont $arg1 [ uitext      $arg2 $arg3       ] ]
uifontcolortext = [ uifont $arg1 [ uicolortext $arg2 $arg3 $arg4 ] ]

changeui = [
	if $arg2 [] [ arg2 = $uiname ]
	hideui $arg2 ; showui $arg1
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #1  menu, panel, stddialog, quickdialog & title buttons                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

UItitlebutton_exit = [
	UIbuttonarea "hold2 $c_darkred n n" @(*f $uiPad:L 5.0) @(*f $uiPad:L 2.7) [
		UIfastimg "" "ui/" "ui_exit" "" $uiPad:2XL
		uirelease [ hideui $uiname ]
	]
]

// UImenu "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ] [ title-children ] [ title-buttons ]
// NOTE: title buttons are formatted like so: [ [titlebutton-name arg1 arg2 ..] .. ]
UImenu = [
	if (=s $arg6 "") [ arg6 = %1 ] [
		if (=s $arg7 "") [ arg7 = UItitlebutton_exit ] [
			arg7 = (looplistconcat i $arg7 [ result [UItitlebutton_@i ;] ])
		]
		arg6 = [
			uivlist 0 [
				uivgradient $c_main1 $c_main2 0 $uiPad:6XL [
					@@@arg6
					uispace $uiPad:S 0 [
						uihlist 0 %2
					] ; uialign- 1 -1
				] ; uiclamp-x
				%1
			]
		]
	]
	newui $arg1 [
		@arg5
		if (getalias .UI_KBisoob) [
			uieschide 0
			uipress    [ .UI_KBclean ]
			uiescpress [ .UI_KBclean ]
		]
		@(format $arg6 [
			uicolor $c_menu 0.01 0.01 [
				UIfastimgtile "ui/" "ui_bg0"
				uispace $uiPad:L $uiPad:L [@@@arg2]
				uiclamp*e
			]
		] $arg7)
		uioutline $c_line1
		uiclamp*e
	] [
		UIsetbgblur 1
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg3
	] [
		UIsetbgblur -1
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg4
	]
]

// UIpanel "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ]
UIpanel = [
	newui $arg1 [
		@arg5
		@(? $arg2 [
			uicolor $c_diag2 0.01 0.01 [
				uispace $uiPad:L $uiPad:L [ @@@arg2 ]
				uioutline $c_line1
				uiclamp*e
			]
		])
		uiclamp*e
	] [
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg3
	] [
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg4
	]
]

// UIstddialog "NAME" [ children ] [ true ] [ false ] [ on-show ] [ on-hide ]
UIstddialog = [
	newui $arg1 [
		uispace $uiPad:4XL 0 [
			uiclamp.e
			style_generic_box d n d d n
			uiclamp*e
			uispace $uiPad:4XL $uiPad:L [
				uiclamp.e
				@@@arg2
			]
		]
		uispace 0 $uiPad:4XL [
			uiclamp.x
			uialign 0 -1
			uihlist 0 [
				uiclamp.x
				UIbuttonarea "" $uiPad:SXL 0 [
					UIfastimg "" "ui/" "yes" "" (+f $uiPad:6XL (uihold? 0 (uihover? (*f (UIcoswave 200) $uiPad:O4) 0)))
					uirelease [ @@@@@arg3 ; hideui $uiname ]
					UIhoveronce [ UIsetmillis ]
				]
				UIbuttonarea "" $uiPad:SXL 0 [
					UIfastimg "" "ui/" "no" "" (+f $uiPad:6XL (uihold? 0 (uihover? (*f (UIcoswave 250) $uiPad:O4) 0)))
					uirelease [ @@@@@arg4 ; hideui $uiname ]
					UIhoveronce [ UIsetmillis ]
				]
			]
		]
	] [
		UIsetbgblur 1
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg5
	] [
		UIsetbgblur -1
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg6
	]
]

// UIquickdialog "NAME" [ ui/bg-children ] [ children ] [ on-show ] [ on-hide ]
UIquickdialog = [
	newui $arg1 [
		@arg2
		@(? $arg3 [
			uispace $uiPad:L $uiPad:L [
				uiclamp.e
				@@arg3
			]
		])
	] [
		UIsetmillis @arg1
		UIsetshelf @arg1
		@arg4
	] [
		if (=s $.UI_KBthisui @arg1) [ .UI_KBclean ]
		@arg5
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #2  fastimg(tile/stretched), bar, triangle, circle, checkbox, radio, arrowbutton & keybox               //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIfastimg TEXCOMMAND PATH1 PATH2 PATH3 X Y [ children ]
UIfastimg = [
	if $arg5 [] [ arg5 = $uiPad:SXL ]
	if $arg6 [] [ arg6 = $arg5 ]
	uiimage (concatword $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg5 $arg6 [ doargs $arg7 ]
]

// UIfastimgtile PATH1 PATH2 PATH3 [ children ] W H X Y
UIfastimgtile = [
	if $arg5 [] [ arg5 = $uiPad:SXL ]
	if $arg6 [] [ arg6 = $arg5 ]
	uitiledimage (concatword "data/interface/" $arg1 $arg2 $arg3 ".png") $arg5 $arg6 $arg7 $arg8 [ doargs $arg4 ]
]

// UIfastimgstretched TEXCOMMAND PATH1 PATH2 PATH3 [ children ] X Y
UIfastimgstretched = [
	uistretchedimage (concatword $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg6 $arg7 [ doargs $arg5 ]
]

// UIbar CLAMP-X CLAMP-Y SPACE-X SPACE-Y 0xCOLOR
UIbar = [
	if (> $numargs 4) [] [ arg5 = $c_line1 ]
	if (|| $arg3 $arg4) [
		uispace $arg3 $arg4 [
			uiclamp $arg1 $arg1 $arg2 $arg2
			uiline $arg5
			uiclamp- $arg1 $arg1 $arg2 $arg2
		]
	] [
		uiline $arg5
		uiclamp- $arg1 $arg1 $arg2 $arg2
	]
]

// UItriangle 0xCOLOR_TRIANGLE 0xCOLOR_OUTLINE X Y ROTATION
UItriangle = [
	uigroup [
		if $arg1 [] [ arg1 = $c_baige ]
		if $arg2 [] [ arg2 = $arg1 ]
		if $arg3 [] [ arg3 = $uiPad:O3 ]
		if $arg4 [] [ arg4 = $arg3 ]
		uitriangle $arg1 $arg3 $arg4 $arg5
		uitriangleoutline $arg2 $arg3 $arg4 $arg5
	]
]

// UItriangle 0xCOLOR_CIRCLE 0xCOLOR_OUTLINE SIZE
UIcircle = [
	uigroup [
		if $arg1 [] [ arg1 = $c_baige ]
		if $arg2 [] [ arg2 = $arg1 ]
		if $arg3 [] [ arg3 = $uiPad:O3 ]
		uicircle $arg1 $arg3
		uicircleoutline $arg2 $arg3
	]
]

// UIcheckbox [ condition ] SIZE 0xAARRGGBB/ICON-ON 0xAARRGGBB/ICON-OFF [ children ]
UIcheckbox = [
	arg1 = (! (! (arg1)))
	if $arg2 [] [ arg2 = $uiPad:2XL ]
	if $.UI_useimg [ UIfastimg "" "ui/" "ui_checkbox" $arg1 $arg2 $arg2 $arg5 ] [
		if $arg4 [] [ arg4 = $c_cb0 ]
		if $arg3 [] [ arg3 = $c_cb1 ]
		uicolor (? $arg1 $arg3 $arg4) $arg2 $arg2 [
			style_generic_gradient2
			uioutline (? $arg1 $arg3 $c_line1)
			uiclamp*e
			do $arg5
		]
	]
]

// UIradio [ condition ] SIZE 0xAARRGGBB/ICON-ON 0xAARRGGBB/ICON-OFF [ children ]
UIradio = [
	arg1 = (! (! (arg1)))
	if $arg2 [] [ arg2 = $uiPad:2XL ]
	if $.UI_useimg [ UIfastimg "" "ui/" "ui_radio" $arg1 $arg2 $arg2 $arg5 ] [
		if $arg4 [] [ arg4 = $c_cb0 ]
		if $arg3 [] [ arg3 = $c_cb1 ]
		UIcircle (? $arg1 $arg3 $arg4) $c_line1 $arg2
		do $arg5
	]
]

// UIkeybox X Y [ key-children ] 0xAARRGGBB [ children ]
UIkeybox = [
	if $arg2 [] [ arg2 = $arg1 ]
	if $arg4 [] [ arg4 = 0x505050 ]
	uigroup [
		uicolor $arg4 (-f $arg1 0.004) (-f $arg2 0.003) [ style_generic_gradient2 ; uiclamp-e ]
		uistretchedimage "data/interface/ui/io/frame.png" 0.025 0.025 [ uifill $arg1 $arg2 $arg5 ]
		uioffset 0 -0.003 [ doargs $arg3 ]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #3  settip, cleartip, hoveronce, hoversound, scrollsound                                                //
//      coswave, sinwave, setshelf, tabaction & setblurbg                                                   //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

UIsettip     = [ uihover [ [.@[uiname]_tip] = $arg1 ] ]
UIcleartip   = [ uihover [] [ [.@[uiname]_tip] = "" ] ]

// container to trigger an action only once upon hover
UIhoveronce = [
	uitarget 0 0 [
		if (&& $ui!hover? [! $uihold?] [! $uieschold?]) $arg1
		uihover [ uitarget ; uiclamp-e ]
	] ; uiclamp-e
]

// trigger sound upon hovering a UI element
UIhoversound = [
	if $.UI_sounds [ UIhoveronce [ uisound "ui/uihover.wav" 50 ] ]
]

// UIscrollsound  var-name  delta  limit
// trigger a scroll sound when given var changes value between set limits
UIscrollsound = [
	if $arg2 [] [ arg2 = 1 ]
	if ((? (> $arg2 0) < >) $$arg1 $arg3) [ arg4 = 1 ]
	if $arg4 [
		$arg1 = ((? (> $arg2 0) min max) (+ $$arg1 $arg2) $arg3)
		if $.UI_sounds [ uisound "ui/uiscroll.wav" 255 ]
	]
]

// UIcoswave  rep-millis
// retrieve Y coswave value based on UI's current millis footprint
UIcoswave = [ coswave (abs (- $getmillis $[.UImillis_@uiname])) $arg1 ]

// UIsinwave  rep-millis
// retrieve Y sinwave value based on UI's current millis footprint
UIsinwave = [ sinwave (abs (- $getmillis $[.UImillis_@uiname])) $arg1 ]

// UIsetmillis  var-name
// set a UI's millis footprint to current millis
UIsetmillis = [ [.UImillis_@(? $numargs $arg1 $uiname)] = $getmillis ]

// UIsetshelf  ui_name
// init a UI's shelf value to 0 when arg1 is provided or perform a shelf show/hide with a loop
UIsetshelf = [
	if $arg1 [ [.UIshelf_@arg1] = 0 ] [
		arg1 = [.UIshelf_@uiname]
		if (|| $uihover? $arg2) [
			if (<f $$arg1 1.0) [ $arg1 = (clampf (+f $$arg1 0.1) 0 1) ]
		] [
			if (>f $$arg1 0.0) [ $arg1 = (clampf (-f $$arg1 0.1) 0 1) ]
		]
	]
]

// UItabaction  STATE_1  STATE_2  [ action_1 ]  [ action_2 ]
UItabaction = [
	if $.UI_clicktab [ $arg1 $arg3 ] [
		$arg2 (? (< $numargs 4) $arg3 $arg4)
	]
]

// UIsetbgblur  DELTA
// add or remove blur postfx to screen depending on provided delta
UIsetbgblur = [
	case $arg1 1 [
		if (&& $.UI_blurring [! $.UI_blurbg]) [
			//addpostfx "sobel"
			loop i 10 [ addpostfx "uiblur" ]
		]
		.UI_blurbg (+ $.UI_blurbg $arg1)
	] -1 [
		.UI_blurbg (max 0 (+ $.UI_blurbg $arg1))
		if (! $.UI_blurbg) clearpostfx
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #4  basicfield, basiceditor & tooltipbox                                                                //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIbasicfield VAR STRLEN [ on-change ] TEXTSIZE [ children ] [ blank-field children ]
UIbasicfield = [
	uicolor $c_menu_m 0 0 [
		uihover [ uioutline (coswave.INT $c_line1 $c_line2 500) ] [ uioutline $c_line1 ]
		uiclamp-e
		uifield $arg1 $arg2 $arg3 $arg4 [
			arg5
			uifocus [ uioutline $c_red ] [
				if (=s $$arg1 "") [ doargs $arg6 ]
			]
			uiclamp-e
		]
	]
]

// UIbasiceditor VAR STRLEN STRLINES TEXTSIZE [ on-change ] PERSISTENCE [ children ]
UIbasiceditor = [
	uicolor $c_menu_m 0 0 [
		uihover [ uioutline (coswave.INT $c_line1 $c_line2 500) ] [ uioutline $c_line1 ]
		uiclamp-e
		uitexteditor $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 [
			arg7
			uifocus [ uioutline $c_red ]
			uiclamp-e
		]
	]
]

// UItooltipbox X Y [ children ] SCROLLSPEED [ bottom children ]
UItooltipbox = [
	UIcleartip
	if (=f $arg4 0.0) [ arg4 = (*f $arg2 2) ]
	uihlist 0 [
		uiline $c_line1 0 $arg2 [ uialign 0 -1 ]
		uivlist 0 [
			uigroup [
				uiscroll (+f $arg1 $uiPad:L $uiPad:3XL) $arg2 [
					uifill $arg1 $arg2 $arg3
				]
				UIbar 1 ; uialign- 0 -1 // gotta make sure it draws on top
			]
			UIbar 1
			uihlist 0 [
				uiclamp.x
				uihlist $uiPad:S [
					uiline $c_line1 $uiPad:S $uiPad:3XL
					if (!=s (getalias [.@[uiname]_tip]) "") [
						UIfastimg "" "ui/" "ui_question" "1" $uiPad:3XL $uiPad:3XL
						uiclip 0 $uiPad:3XL [ uitext $[.@[uiname]_tip] 0.5 ]
					] [ UIfastimg "" "ui/" "ui_question" "0" $uiPad:3XL $uiPad:3XL ]
				]
				if (> $numargs 4) [
					uiclip 0 $uiPad:3XL [
						uihlist $uiPad:S [
							arg5
							uifill
						]
					]
				]
			]
			uioffset $uiPad:S 0 [
				uiclamp.x
				UIbar 1
			]
		]
		uivlist 0 [ // purely cosmetic lines
			uiclamp.y
			uiline $c_line1 $uiPad:L
			uigroup [
				uiline $c_line1 $uiPad:S $uiPad:3XL ; uialign- -1
				uiline $c_line1 $uiPad:L            ; uialign-  0 1
			]
		]
		UIvscrollbar 0 (+f $arg2 $uiPad:3XL) $arg4
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #5  box, buttonarea, button & fancytext                                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIbox [ style(s) ] X Y [ children ]
UIbox = [
	if $arg3 [] [ arg3 = $arg2 ]
	uitarget $arg2 $arg3 [
		if (=s $arg1 "") [
			style_generic_default
		] [ doargs [style_generic_@arg1] ]
		uiclamp*e
		doargs $arg4
	]
]

// UIbuttonarea [ style(s) ] X Y [ children ]
UIbuttonarea = [
	if $arg3 [] [ arg3 = $arg2 ]
	uitarget $arg2 $arg3 [
		UIhoversound
		if (=s $arg1 "") [
			style_button_default
		] [ doargs [style_button_@arg1] ]
		uiclamp*e
		doargs $arg4
	]
]

// UIbutton [ style(s) ] [ button-children ] X Y [ on-release ] ROTATION [ children ] (USE-PADDING)
UIbutton = [
	if (< $numargs 8) [ arg8 = $uiPad:L ]
	if $arg3 [] [ arg3 = $uiPad:5XL ]
	if $arg4 [] [ arg4 = $uiPad:5XL ]
	uitarget $arg3 $arg4 [
		UIhoversound
		doargs $arg7
		if (=s $arg1 "") [
			style_button_default
		] [ doargs [style_button_@arg1] ]
		uirelease [ doargs $arg5 ]
		uiclamp*e
		uispace $arg8 0 [
			uiclamp.x
			uihlist $uiPad:L [
				uialign $arg6 0
				doargs $arg2
			]
		]
	]
]

// UIfancytext  FONT  TEXT  0xCOLOR  SIZE  [ cond ] [ bg-children ] [ fg-children ]
UIfancytext = [
	echo $arg1 | $arg2 | $arg3 | $arg4
	if (=s $arg1 "") [ arg1 = "def" ]
	if (<  $arg3  0) [ arg3 = $c_white ]
	uigroup [
		uioffset $uiPad:O1- $uiPad:O1 [
			uifontcolortext [@arg1.ol] $arg2 (|A 0x20) $arg4
			uifontcolortext $arg1 $arg2 0 $arg4
			if $arg5 $arg6
		]
		uioffset $uiPad:O1 $uiPad:O1- [
			uifontcolortext $arg1 $arg2 $arg3 $arg4
			if $arg5 $arg7
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #6  sliders, colorsliders, spectrumsliders & barslider                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIvslider VAR MIN MAX STEP [ on-change ] [ label formatting ] X Y [ pulse trigger cond ]
UIvslider = [
	if $arg7 [] [ arg7 = $uiPad:5XL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]
	if $arg6 [ arg6 = (do $arg6) ] [ arg6 = $$arg1 ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg7 $arg8 [
		UIhoversound
		uispace $uiPad:O4 0 [
			style_generic_box $c_main1 n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace 0 $uiPad:L [
			uivslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg5 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
			uivlist $uiPad:M- [
				loop i (strlen $arg6) [
					uifontcolortext "def.ol" (substr $arg6 $i 1) (|A (? $arg9 0xA0 0x60) -1) 0.65
				]
			]
		]
		uiclamp*e
	]
]

// UIhslider VAR MIN MAX STEP [ on-change ] [ label formatting ] X Y [ pulse trigger cond ]
UIhslider = [
	if $arg7 [] [ arg7 = $uiPad:5XL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]
	if $arg6 [ arg6 = (do $arg6) ] [ arg6 = $$arg1 ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg7 $arg8 [
		UIhoversound
		uispace 0 $uiPad:O4 [
			style_generic_box $c_main1 n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace $uiPad:L 0 [
			uihslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg5 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
			uifontcolortext "def.ol" $arg6 (|A (? $arg9 0xA0 0x60) -1) 0.65
		]
		uiclamp*e
	]
]

// UIvcolorslider VAR MIN MAX 0xCOLOR1 0xCOLOR2 [ on-change ] X Y [ pulse trigger cond ]
UIvcolorslider = [
	if $arg7 [] [ arg7 = $uiPad:5XL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg7 $arg8 [
		UIhoversound
		uispace $uiPad:O4 0 [
			uivgradient $arg4 $arg5
			style_generic_box n n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace 0 $uiPad:L [
			uivslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
				uisliderbutton [
					if (<= $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
			uivlist $uiPad:M- [
				loop i (strlen $$arg1) [
					uifontcolortext "wide.ol" (substr $$arg1 $i 1) (|A (? $arg9 0xA0 0x60) -1) 0.7
				]
			]
		]
		uiclamp*e
	]
]

// UIhcolorslider VAR MIN MAX 0xCOLOR1 0xCOLOR2 [ on-change ] X Y [ pulse trigger cond ]
UIhcolorslider = [
	if $arg7 [] [ arg7 = $uiPad:5XL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]
	if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
	uitarget $arg7 $arg8 [
		UIhoversound
		uispace 0 $uiPad:O4 [
			uihgradient $arg4 $arg5
			style_generic_box n n d d (? $arg9 p d)
			uiclamp*e
		]
		uispace $uiPad:L 0 [
			uihslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
				uisliderbutton [
					if (<= $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
			uifontcolortext "wide.ol" $$arg1 (|A (? $arg9 0xA0 0x60) -1) 0.7
		]
		uiclamp*e
	]
]

// UIvspectrumslider VAR MIN MAX [ on-change ] X Y [ pulse trigger cond ]
UIvspectrumslider = [
	if $arg5 [] [ arg5 = $uiPad:5XL ]
	if $arg6 [] [ arg6 = $uiPad:5XL ]
	if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
	uitarget $arg5 $arg6 [
		UIhoversound
		uispace $uiPad:O4 0 [
			uivlist 0 [
				looplist2 c1 c2 [
					0xFF0000 0xFFFF00
					0xFFFF00 0x00FF00
					0x00FF00 0x00FFFF
					0x00FFFF 0x0000FF
					0x0000FF 0xFF00FF
					0xFF00FF 0xFF0000
				] [ uivgradient $c1 $c2 ]
				uiclamp*e
			]
			style_generic_box n n n d (? $arg7 p d)
			uiclamp*e
		]
		uispace 0 $uiPad:L [
			uivslider $arg1 $arg2 $arg3 1 [ doargs $arg4 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-x
				]
				uiclamp-x
			]
			uiclamp-e
		]
		uiclamp*e
	]
]

// UIhspectrumslider VAR MIN MAX [ on-change ] X Y [ pulse trigger cond ]
UIhspectrumslider = [
	if $arg5 [] [ arg5 = $uiPad:5XL ]
	if $arg6 [] [ arg6 = $uiPad:5XL ]
	if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
	uitarget $arg5 $arg6 [
		UIhoversound
		uispace 0 $uiPad:O4 [
			uihlist 0 [
				looplist2 c1 c2 [
					0xFF0000 0xFFFF00
					0xFFFF00 0x00FF00
					0x00FF00 0x00FFFF
					0x00FFFF 0x0000FF
					0x0000FF 0xFF00FF
					0xFF00FF 0xFF0000
				] [ uihgradient $c1 $c2 ]
				uiclamp*e
			]
			style_generic_box n n n d (? $arg7 p d)
			uiclamp*e
		]
		uispace $uiPad:L 0 [
			uihslider $arg1 $arg2 $arg3 1 [ doargs $arg4 ] [
				uisliderbutton [
					if (<=f $arg2 $$arg1 $arg3) [ uiline $c_baige ] [ uifill ]
					uiclamp-y
				]
				uiclamp-y
			]
			uiclamp-e
		]
		uiclamp*e
	]
]

// UIhbarslider VAR MIN MAX STEP [ on-change ] X Y [ pulse trigger cond ]
UIhbarslider = [
	if (> $arg2 $arg3) [ // swap MIN/MAX around if they're the wrong way around.
		arg9 = $arg2
		arg2 = (+ $arg3 0) // ensure MIN is int
		arg3 = (+ $arg9 0) // ensure MAX is int
	]
	arg4 = (abs $arg4) // ensure STEP is positive int
	if $arg7 [] [ arg7 = $uiPad:5XL ]
	if $arg8 [ arg8 = (do $arg8) ] [ arg8 = (|| uihover+? uihold+?) ]
	
	local bar.max bar.idx bar.act
	bar.max = (+ (abs (div (- $arg2 $arg3) $arg4)) 1)
	bar.max = (divf (-f $arg6 $uiPad:XL (*f (- $bar.max 1) $uiPad:O3)) $bar.max)
	bar.idx = (div (- $$arg1 $arg2) $arg4)

	uigroup [
		UIhoversound
		uihslider $arg1 $arg2 $arg3 $arg4 $arg5 [
			uifill (*f 0.97 (-f $arg6 $bar.max)) $arg7
			uisliderbutton [
				if (<= $arg2 $$arg1 $arg3) [ uifill ]
				uiclamp-y
			]
			uiclamp-y
		]
		arg7 = (*f 0.75 $arg7)
		uifill $arg6 $arg7 [
			style_generic_box d d d d (? $arg8 p d)
			uiclamp*e
			uispace $uiPad:S 0 [
				uihlist $uiPad:O3 [
					loop n (max (+ $bar.idx 1) 0) [
						bar.act = (= $n $bar.idx)
						if $.UI_useimg [
							uistretchedimage (
								concatword "data/interface/ui/ui_bar" $bar.act ".png"
							) $uiPad:O5 $uiPad:O5 [ uifill $bar.max (-f $arg7 $uiPad:XL) ]
						] [
							uicolor (? $bar.act $c_cb1 $c_cb0) $bar.max (-f $arg7 $uiPad:XL) [
								style_generic_gradient2
								uioutline (? $bar.act $c_cb1 $c_cb0)
								uiclamp*e
							]
						]
					]
				]
			]
			uialign- -1
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #7  scrollbars, optionslider & wrapperslider                                                            //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIvscrollbar X Y SCROLLSPEED
UIvscrollbar = [
	if $arg1 [] [ arg1 = $uiPad:3XL ]
	arg4 = (*f $arg1 0.35) // arrow size
	if (< $numargs 3) [ arg3 = (*f $arg2 2) ]
	uivlist 0 [
		uiscrollarrow (!f $arg3)
		UIbar 1
		uivscrollbar [
			uifill $arg1 $arg2 [ UIbar 0 1 ]
			uiscrollbutton [
				UIhoversound
				style_button_hold5
				uiclamp*e
				uispace 0 $arg4 [
					uiclamp.y
					style_generic_linesh 3 $uiPad:O4 (*f $arg1 0.5)
					UItriangle $c_cb0 0 $arg4 $arg4   0 ; uialign- 0 -1
					UItriangle $c_cb0 0 $arg4 $arg4 180 ; uialign- 0  1
				]
			]
			uiclamp-x
		]
		UIbar 1
		uiscrollarrow $arg3
	]
]

// UIhscrollbar X Y SCROLLSPEED
UIhscrollbar = [
	if $arg2 [] [ arg2 = $uiPad:3XL ]
	arg4 = (*f $arg2 0.35) // arrow size
	if (< $numargs 3) [ arg3 = (*f $arg1 2) ]
	uihlist 0 [
		uiscrollarrow $arg3
		UIbar 0 1
		uihscrollbar [
			uifill $arg1 $arg2 [ UIbar 1 ]
			uiscrollbutton [
				UIhoversound
				style_button_hold1
				uiclamp*e
				uispace $arg4 0 [
					uiclamp.x
					style_generic_linesv 3 $uiPad:O4 (*f $arg2 0.5)
					UItriangle $c_cb0 0 $arg4 $arg4  90 ; uialign- -1
					UItriangle $c_cb0 0 $arg4 $arg4 270 ; uialign-  1
				]
			]
			uiclamp-y
		]
		UIbar 0 1
		uiscrollarrow (!f $arg3)
	]
]

// UIoptionslider VAR [ Value Name Color . . . ] [ on-change ] (CONDITION) X Y
UIoptionslider = [
	if (< $numargs 4) [ arg4 = 1 ]
	if $arg6 [] [ arg6 = $uiPad:5XL ]
	uifill $arg5 0 [
		local curr.idx len
		curr.idx = -1
		len = (div (listlen $arg2) 3)
		loop* v 3 $len [
			if (=s (at $arg2 $v) $$arg1) [
				v = (div $v 3)
				curr.idx = $v
			]
		]
		uispace (+f $arg6 $uiPad:O5) 0 [
			uialign 0 1
			uiclamp.e
			uivlist 0 [
				uiclamp.x
				if (> $curr.idx -1) [
					uifontcolortext "wide" (at $arg2 (+ (* $curr.idx 3) 1)) (
						if $arg4 [ doargs (at $arg2 (+ (* $curr.idx 3) 2)) ] [ result $c_gray ]
					) 0.5
				] [ uifontcolortext "wide" "CUSTOM" $c_gray_l 0.5 ]
				uihlist 0 [
					uiclamp.x
					loop v $len [
						uispace $uiPad:O5 0 [
							uiclamp.x
							uicolor (? (= $curr.idx $v) (? $arg4 $c_cb1 $c_gray_l) $c_cb0) 0 (*f $arg6 0.09375) [
								uiclamp.x
								style_generic_gradient2
								uioutline (? (= $curr.idx $v) (? $arg4 $c_cb1 $c_gray_l) $c_cb0)
								uiclamp*e
							]
						]
					]
				]
				uifill 0 (*f $arg6 0.0625) // *magic*
			]
		]
		if (>= $curr.idx 1) [
			UIbuttonarea "hold2" $arg6 $arg6 [
				UItriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg6 0.3) 0 90
				uirelease [ $arg1 = (at $arg2 (* (- $curr.idx 1) 3)) ; arg3 ]
			]
		] [ uifill $arg6 $arg6 [ UItriangle $c_cb0 0 (*f $arg6 0.3) 0 90 ] ]
		uialign- -1
		if (<= $curr.idx (- $len 2)) [
			UIbuttonarea "hold2" $arg6 $arg6 [
				UItriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg6 0.3) 0 270
				uirelease [ $arg1 = (at $arg2 (* (+ $curr.idx 1) 3)) ; arg3 ]
			]
		] [ uifill $arg6 $arg6 [ UItriangle $c_cb0 0 (*f $arg6 0.3) 0 270 ] ]
		uialign-  1
	]
]

// UIoptionwrapper VAR [ Value Name . . . ] [ on-change ] X Y
UIoptionwrapper = [
	if $arg5 [] [ arg5 = $uiPad:5XL ]
	uifill $arg4 0 [
		local curr.idx len
		curr.idx = -1
		len = (div (listlen $arg2) 2)
		loop* v 2 $len [
			if (= (at $arg2 $v) $$arg1) [
				v = (div $v 2)
				curr.idx = $v
			]
		]
		uispace (+f $arg5 $uiPad:L) 0 [
			uialign 0 1
			uiclamp.e
			uivlist 0 [
				uiclamp.x
				if (> $curr.idx -1) [
					uifonttext "wide" (at $arg2 (+ (* $curr.idx 2) 1)) 0.5
				] [ uifontcolortext "wide" "UNKNOWN" $c_gray_l 0.5 ]
				uihlist 0 [
					uiclamp.x
					loop v $len [
						uicolor (? (= $curr.idx $v) $c_cb1 $c_cb0) 0 (*f $arg5 0.09375) [
							uiclamp.x
							style_generic_gradient2
							uioutline (? (= $curr.idx $v) $c_cb1 $c_cb0)
							uiclamp*e
						]
					]
				]
				uifill 0 (*f $arg5 0.0625) // *magic*
			]
		]
		UIbuttonarea "hold2" $arg5 $arg5 [
			UItriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg5 0.3) 0 90
			uirelease [
				case $curr.idx -1 [ curr.idx = 0 ] 0 [ curr.idx = (- $len 1) ] () [ curr.idx = (- $curr.idx 1) ]
				$arg1 = (at $arg2 (* $curr.idx 2)) ; arg3
			]
		] ; uialign- -1
		UIbuttonarea "hold2" $arg5 $arg5 [
			UItriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg5 0.3) 0 270
			uirelease [
				case $curr.idx -1 [ curr.idx = (- $len 1) ] (- $len 1) [ curr.idx = 0 ] () [ curr.idx = (+ $curr.idx 1) ]
				$arg1 = (at $arg2 (* $curr.idx 2)) ; arg3
			]
		] ; uialign-  1
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #8  HUD: hudcell, hudcellslider, entcell, entcolor12/24                                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// UIhudcell X Y [ children ] X-spacing Y-spacing
UIhudcell = [
	if (< $numargs 4) [ arg4 = $uiPad:L ]
	if (< $numargs 5) [ arg5 = $uiPad:L ]
	uitarget $arg1 $arg2 [
		style_generic_box $c_diag1 d bg0 d n
		uispace $arg4 $arg5 [ doargs $arg3 ]
		uiclamp*e
	]
]

// UIentcell KEY[S] [ children ] TITLE Y-spacing
UIentcell = [
	local x y
	x = (listlen $arg1)
	x = (+f (*f $x $uiPad:D4XL) (*f (- $x 1) $uiPad:L))
	y = (+f (*f $uiPad:5XL 4) $uiPad:3XL)
	if (< $numargs 4) [ arg4 = $uiPad:L ]
	arg5 = (|| [||iskeyheld @arg1] $uihover+?)
	uitarget $x $y [
		style_generic_box (? $arg5 $c_diag2 $c_diag1) d bg0 d (? $arg5 p n)
		uispace $uiPad:L $uiPad:L [
			if (=s $arg3 "") [
				uivlist 0 [
					uiclamp.e
					doargs $arg2
					uiclamp*e
				]
			] [
				uivlist $arg4 [
					uialign 0 -1
					uiclamp.x
					uihlist 0 [
						uitarget (-f $x $uiPad:5XL $uiPad:3XL) (-f $uiPad:5XL $uiPad:S) [
							style_generic_box $c_diag1 n n d n
							uiclamp*e
							uitext $arg3 0.55
						]
						UIkeybox $uiPad:5XL $uiPad:5XL [ uitext $arg1 0.5 ] (? $arg5 $c_cb1)
					]
					doargs $arg2
					uiclamp*x
				]
			]
		]
		uiclamp*e
	]
]

UIentcolor12 = [
	local c1 c2 c3 color12 color24
	color12 = (& (entattr $arg1) 0xFFF)
	c1 =    (>> $color12 0x8)
	c2 = (& (>> $color12 0x4) 0xF)
	c3 = (&     $color12      0xF)
	color24 = (| (<< $c1 0x14) (<< $c2 0xC) (<< $c3 0x4) 0x0F0F0F)
	UIhcolorslider c1 0 15 (& $color24 0x00FFFF) (| $color24 0xFF0000) [ entattr $arg1 (| (<< $c1 0x8) (& $color12 0x0FF)) ]
	UIhcolorslider c2 0 15 (& $color24 0xFF00FF) (| $color24 0x00FF00) [ entattr $arg1 (| (<< $c2 0x4) (& $color12 0xF0F)) ]
	UIhcolorslider c3 0 15 (& $color24 0xFFFF00) (| $color24 0x0000FF) [ entattr $arg1 (|     $c3      (& $color12 0xFF0)) ]
]

UIentcolor24 = [
	local c1 c2 c3 color24
	loop+ i 1 3 [ [c@i] = (& $[ea@i] 0xFF) ]
	color24 = (| (<< $c1 0x10) (<< $c2 0x8) $c3)
	UIhcolorslider c1 0 255 (& $color24 0x00FFFF) (| $color24 0xFF0000) [ entattr 1 $c1 ]
	UIhcolorslider c2 0 255 (& $color24 0xFF00FF) (| $color24 0x00FF00) [ entattr 2 $c2 ]
	UIhcolorslider c3 0 255 (& $color24 0xFFFF00) (| $color24 0x0000FF) [ entattr 3 $c3 ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #9  KB HOOK: UIcaret, advfieldLA/RA/CA, helper funcs KBclean & KBinput                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


UIcaret = [
	if (< (abs (mod (- $getmillis $.UI_KBmillis) 700)) 400) [
		uispace 0 $uiPad:O5 [
			uioffset $uiPad:O3- 0 [
				uiline $c_baige
				uiclamp-y
				uiline $c_baige $uiPad:S
				uialign- 0 -1
				uiline $c_baige $uiPad:S
				uialign- 0  1
			] ; uiclamp-y
		] ; uiclamp-y ; uialign- -1
	]
]

UInumcaret = [
	if (< (abs (mod (- $getmillis $.UI_KBmillis) 700)) 400) [
		uispace 0 $uiPad:O5 [
			uiline $c_baige
			uiclamp-y
			uialign- 1
			uiline $c_baige $uiPad:S
			uialign- 0 -1
			uiline $c_baige $uiPad:S
			uialign- 0  1
		] ; uiclamp-y ; uialign- 1
	]
]

// UIadvfieldLA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldLA = [
	if $arg7 [] [ arg7 = $uiPad:SXL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			uipress [ .UI_KBcaret = $len ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = $len
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uitarget 0 0 [
					uitext " " $arg3
					uipress [ .UI_KBcaret = 0 ]
				]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						] ; uiclamp-e
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uifill 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
				]
				uiclamp*y
			] ; uiclamp-y ; uialign- -1
		] [ doargs $arg10 ]
	]
]

// UIadvfieldRA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldRA = [
	if $arg7 [] [ arg7 = $uiPad:SXL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			uipress [ .UI_KBcaret = 0 ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = 0
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uifill 0 0 [ uitext " " $arg3 ]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						] ; uiclamp-e
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uitarget 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
					uipress [ .UI_KBcaret = $len ]
				]
				uiclamp*y
			] ; uiclamp-y ; uialign- 1
		] [ doargs $arg10 ]
	]
]

// UIadvfieldCA VAR STRLEN TEXTSIZE TYPE [ on-change ] [ on-finish ] X Y [ children ] [ blank-field children ]
UIadvfieldCA = [
	if $arg7 [] [ arg7 = $uiPad:SXL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]

	local len caret this char
	len   = (strlen $$arg1)           // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_red n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarlen = $arg2
				.UI_KBdict   = $arg4
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = 0
			]
		]
		doargs $arg9
		
		if (? $this 1 $len) [
			uihlist 0 [
				uitarget 0 0 [ uipress [ .UI_KBcaret = 0    ] ]
				uitarget 0 0 [ uipress [ .UI_KBcaret = $len ] ]
				uiclamp*e
			] ; uiclamp-e
			uihlist 0 [
				uifill 0 0 [ uitext " " $arg3 ]
				loop n $len [
					uifill 0 0 [
						uihlist 0 [
							uitarget 0 0 [ uipress [ .UI_KBcaret =    $n    ] ]
							uitarget 0 0 [ uipress [ .UI_KBcaret = (+ $n 1) ] ]
							uiclamp*e
						] ; uiclamp-e
						if (= $caret $n) [ UIcaret ]
						char = (substr $$arg1 $n 1)
						if (=s $char " ") [ uicolortext "_" $c_line1 $arg3 ]
						uitext $char $arg3
					]
				]
				uifill 0 0 [
					if (>= $caret $len) [ UIcaret ]
					uitext " " $arg3
				]
				uiclamp*y
			] ; uiclamp-y
		] [ doargs $arg10 ]
	]
]

// UIadvfieldRAint VAR MIN MAX TEXTSIZE [ on-change ] [ on-finish ] X Y [ children ]
UIadvfieldRAint = [
	if $arg7 [] [ arg7 = $uiPad:SXL ]
	if $arg8 [] [ arg8 = $uiPad:5XL ]
	if (< $arg3 $arg2) [
		arg10 = $arg2
		arg2  = $arg3
		arg3  = $arg10
	] // ensure MIN is always less than MAX

	local y neg len caret this char
	btn.y = (-f $arg8 $uiPad:XL)
	neg   = (< $$arg1 0)
	len   = (strlen (max (abs $arg2) (abs $arg3)))  // shortcut for VAR length
	this  = (=s $.UI_KBvarcur $arg1)  // active field check
	caret = (? $this $.UI_KBcaret -1) // current caret for THIS field

	uifill $arg7 $arg8 [
		if $this [
			style_generic_box d d n $c_gray_l n
			uiclamp*e
			.UI_KBisoob = (! $uihover?)
			if $.UI_KBvar0x [
				if (! $uihover+?) [ uipress [ .UI_KBcaret = $neg ] ]
			] [ uipress  [ .UI_KBcaret = $neg ] ]
		] [
			style_generic_box d d n
			uiclamp*e
			UIhoversound
			uipress [
				.UI_KBmillis = $getmillis
				.UI_KBthisui = $uiname
				.UI_KBvarcur = $arg1
				.UI_KBvarmin = $arg2
				.UI_KBvarmax = $arg3
				.UI_KBvar0x  = (&& [< $.UI_KBvarmin 0] [>= $.UI_KBvarmax 0])
				.UI_KBvarlen = $len
				.UI_KBdict   = "int"
				.UI_KBvarmod = $arg5
				.UI_KBvarend = $arg6
				.UI_KBcaret  = $neg
			]
		]
		doargs $arg9
		
		uihlist 0 [
			uialign -1
			uifill $uiPad:S
			uitarget $btn.y $btn.y [
				if (&& $this [getalias .UI_KBvar0x]) [
					style_button_hold2
					UIhoversound
					uiclamp*e
					uipress [ sleep 0 [ .UI_KBinput "MINUS" ] ]
				]
				uiclip $btn.y $btn.y [
					uioffset 0 -0.0025 [
						uifonttext "wide" (? $neg "-" "+") $arg4
					]
				]
			]
		]
		uihlist 0 [
			uifill (*f $btn.y 1.5)
			loop+ n $neg $len [
				uitarget 0 0 [
					uipress [ .UI_KBcaret = $n ]
					char = (- $n (- $len (strlen (abs $$arg1))))
					uifont "mono" [
						if (< $char $neg) [
							uicolortext "_" (? (= $caret $n) $c_green $c_line2) $arg4
						] [ uitext (substr (+ $$arg1 0) $char 1) $arg4 ]
					]
					if (= $caret $n) [ UInumcaret ]
				]
			]
			uitarget (*f $btn.y 0.5) 0 [ uipress [ .UI_KBcaret = (- $len (! $neg)) ] ]
			uiclamp*y
		] ; uiclamp-y ; uialign- 1
	]
]

.UI_KBclean = [
	cases $.UI_KBdict "int" [
		set $.UI_KBvarcur (clamp  $$.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax)
	] "float" [
		set $.UI_KBvarcur (clampf $$.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax)
	] () []
	do (getalias .UI_KBvarend)
	.UI_KBdict   = ""
	.UI_KBvarcur = ""
	.UI_KBvarmod = ""
	.UI_KBvarend = ""
	.UI_KBthisui = ""
	.UI_KBvarlen =  1
	.UI_KBvarmin =  0
	.UI_KBvarmax =  0
	.UI_KBvardot =  0
	.UI_KBcaret  = -1
	.UI_KBisoob = 0
]

.UI_KBinput = [
	if (> (indexof "ESCAPE RETURN KP_ENTER" $arg1) -1) [ .UI_KBclean ] [
		cases $.UI_KBdict "int" [
			local .UI_KBvarneg .UI_KBvarpow .UI_KBvarnew
			.UI_KBvarneg = (< $$.UI_KBvarcur 0)
			.UI_KBvarpow = (pow 10 (- $.UI_KBvarlen $.UI_KBcaret (! $.UI_KBvarneg)))
			cases $arg1 "DELETE" [
				if $$.UI_KBvarcur [
					.UI_KBvarnew = (abs $$.UI_KBvarcur)
					.UI_KBvarnew = (+ (* (div $.UI_KBvarnew (* $.UI_KBvarpow 10)) $.UI_KBvarpow) (mod $.UI_KBvarnew $.UI_KBvarpow))
					if $.UI_KBvarneg [ .UI_KBvarnew = (* $.UI_KBvarnew -1) ]
					if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
						if (&& $.UI_KBvarneg [= $.UI_KBvarnew 0]) [ -- .UI_KBcaret ] [
							++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
						]
						set $.UI_KBvarcur (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				]
			] "BACKSPACE" [
				if (||iskeyheld "LCTRL" "RCTRL") [
					.UI_KBvarnew = (clamp 0 $.UI_KBvarmin $.UI_KBvarmax)
					if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
						set $.UI_KBvarcur $.UI_KBvarnew
						.UI_KBcaret  = $.UI_KBvarneg
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				] [
					if $$.UI_KBvarcur [
						.UI_KBvarnew = (pad0 (abs $$.UI_KBvarcur) $.UI_KBvarlen " ")
						.UI_KBvarnew = (strsplice $.UI_KBvarnew "" (- $.UI_KBcaret $.UI_KBvarneg) 1)
						if $.UI_KBvarneg [ .UI_KBvarnew = (* $.UI_KBvarnew -1) ]
						if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
							if (&& $.UI_KBvarneg [= $.UI_KBvarnew 0]) [ -- .UI_KBcaret ]
							set $.UI_KBvarcur (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
							.UI_KBmillis = $getmillis
							do $.UI_KBvarmod
						]
					]
				]
			] "LEFT" [
				if (||iskeyheld "LCTRL" "RCTRL") [ 
					if $$.UI_KBvarcur [
						.UI_KBvarnew = (* $$.UI_KBvarcur 10)
						if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
							set $.UI_KBvarcur (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
							.UI_KBmillis = $getmillis
							do $.UI_KBvarmod
						]
					]
				] [
					--c .UI_KBcaret $.UI_KBvarneg
					.UI_KBmillis = $getmillis
				]
			] "RIGHT" [
				if (||iskeyheld "LCTRL" "RCTRL") [
					if $$.UI_KBvarcur [
						.UI_KBvarnew = (div $$.UI_KBvarcur 10)
						if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
							if (&& $.UI_KBvarneg [>= $.UI_KBvarnew 0]) [ -- .UI_KBcaret ]
							set $.UI_KBvarcur (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
							.UI_KBmillis = $getmillis
							do $.UI_KBvarmod
						]
					]
				] [ 
					++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
					.UI_KBmillis = $getmillis
				]
			] "UP" [
				if (< $$.UI_KBvarcur $.UI_KBvarmax) [
					if (||iskeyheld "LCTRL" "RCTRL") [
						if (&& $.UI_KBvarneg [>= $.UI_KBvarmax 0]) [ -- .UI_KBcaret ]
						set $.UI_KBvarcur $.UI_KBvarmax
					] [
						.UI_KBvarnew = (+ $$.UI_KBvarcur $.UI_KBvarpow)
						if (< $$.UI_KBvarcur 0 $.UI_KBvarnew) [ // value inversion check
							set $.UI_KBvarcur (min (* $$.UI_KBvarcur -1) $.UI_KBvarmax)
							-- .UI_KBcaret
						] [
							if $.UI_KBvarnew [] [ -- .UI_KBcaret ]
							set $.UI_KBvarcur (min $.UI_KBvarnew $.UI_KBvarmax)
						]
					]
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] "DOWN" [
				if (> $$.UI_KBvarcur $.UI_KBvarmin) [
					if (||iskeyheld "LCTRL" "RCTRL") [
						if (&& [< $.UI_KBvarmin 0] [! $.UI_KBvarneg]) [ ++ .UI_KBcaret ]
						set $.UI_KBvarcur $.UI_KBvarmin
					] [
						.UI_KBvarnew = (- $$.UI_KBvarcur $.UI_KBvarpow)
						if (< $.UI_KBvarnew 0 $$.UI_KBvarcur) [ // value inversion check
							set $.UI_KBvarcur (clamp (- 0 $$.UI_KBvarcur) $.UI_KBvarmin $.UI_KBvarmax)
							++ .UI_KBcaret
						] [
							if $$.UI_KBvarcur [] [ ++ .UI_KBcaret ]
							set $.UI_KBvarcur (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
						]
					]
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] "MINUS" [
				if (&& $$.UI_KBvarcur $.UI_KBvar0x) [
					if $.UI_KBvarneg [ -- .UI_KBcaret ] [ ++ .UI_KBcaret ]
					set $.UI_KBvarcur (clamp (* $$.UI_KBvarcur -1) $.UI_KBvarmin $.UI_KBvarmax)
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] () [
				arg3 = (indexof "KP0 0 KP1 1 KP2 2 KP3 3 KP4 4 KP5 5 KP6 6 KP7 7 KP8 8 KP9 9" $arg1)
				if (&& [> $arg3 -1] [! (||iskeyheld "LSHIFT" "RSHIFT")]) [
					arg3 = (div $arg3 2)
					arg4 = (pad0 (abs $$.UI_KBvarcur) $.UI_KBvarlen " ")
					arg4 = (substr $arg4 (- $.UI_KBcaret $.UI_KBvarneg) 1)
					if (=s $arg4 " ") [
						if $arg3 [
							.UI_KBvarnew = (* $arg3 $.UI_KBvarpow (? $.UI_KBvarneg -1 1))
							.UI_KBvarnew = (+ $$.UI_KBvarcur $.UI_KBvarnew)
							.UI_KBvarnew = (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
							if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
								set $.UI_KBvarcur $.UI_KBvarnew
								++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
								.UI_KBmillis = $getmillis
								do $.UI_KBvarmod
							]
						] [
							++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
							.UI_KBmillis = $getmillis
						]
					] [
						if (= $arg3 $arg4) [
							++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
							.UI_KBmillis = $getmillis
						] [
							if (|| $arg3 [!= (- $.UI_KBcaret $.UI_KBvarneg) (- $.UI_KBvarlen (strlen (abs $$.UI_KBvarcur)))]) [
								.UI_KBvarnew = (pad0 (abs $$.UI_KBvarcur) $.UI_KBvarlen " ")
								.UI_KBvarnew = (strsplice $.UI_KBvarnew $arg3 $.UI_KBcaret 1)
								.UI_KBvarnew = (clamp $.UI_KBvarnew $.UI_KBvarmin $.UI_KBvarmax)
								if (!= $.UI_KBvarnew $$.UI_KBvarcur) [
									set $.UI_KBvarcur $.UI_KBvarnew
									++c .UI_KBcaret (- $.UI_KBvarlen (! $.UI_KBvarneg))
									.UI_KBmillis = $getmillis
									do $.UI_KBvarmod
								]
							] [ .UI_KBinput "DELETE" ]
						]
					]
				]
			]
		] "float" [ /// XXX whole thing is just.. not there
			cond (> (indexof "0 1 2 3 4 5 6 7 8 9" $arg1) -1) [
				if (||iskeyheld "LSHIFT" "RSHIFT") [] [
					
				]
			]
		] () [
			cases $arg1 "DELETE" [
				if (< $.UI_KBcaret (strlen $$.UI_KBvarcur)) [
					set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" $.UI_KBcaret 1)
					.UI_KBmillis = $getmillis
					do $.UI_KBvarmod
				]
			] "BACKSPACE" [
				if (||iskeyheld "LCTRL" "RCTRL") [
					if (strlen $$.UI_KBvarcur) [
						set $.UI_KBvarcur ""
						.UI_KBcaret  = 0
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				] [
					if (> $.UI_KBcaret 0) [
						-- .UI_KBcaret
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur "" $.UI_KBcaret 1)
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					]
				]
			] "LEFT" [
				--c .UI_KBcaret 0
				.UI_KBmillis = $getmillis
			] "RIGHT" [
				++ .UI_KBcaret (strlen $$.UI_KBvarcur)
				.UI_KBmillis = $getmillis
			] "UP" [
				.UI_KBcaret  = 0
				.UI_KBmillis = $getmillis
			] "DOWN" [
				.UI_KBcaret  = (strlen $$.UI_KBvarcur)
				.UI_KBmillis = $getmillis
			] () [
				if (< (strlen $$.UI_KBvarcur) $.UI_KBvarlen) [
					cond [=s $arg1 "SPACE"] [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur " " $.UI_KBcaret 0)
						++ .UI_KBcaret
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [> (indexof "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" $arg1) -1] [
						set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (
							if (||iskeyheld "LSHIFT" "RSHIFT") [ result $arg1 ] [ strlower $arg1 ]
						) $.UI_KBcaret 0)
						++ .UI_KBcaret
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [> (indexof "0 1 2 3 4 5 6 7 8 9" $arg1) -1] [
						if (||iskeyheld "LSHIFT" "RSHIFT") [
							set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									")" ! "@" # $ % "^^" & * "("
							] $arg1) $.UI_KBcaret 0)
						] [ set $.UI_KBvarcur (strsplice $$.UI_KBvarcur $arg1 $.UI_KBcaret 0) ]
						++ .UI_KBcaret
						.UI_KBmillis = $getmillis
						do $.UI_KBvarmod
					] [
						arg3 = (indexof [
							"BACKQUOTE" "MINUS" "EQUALS" "LEFTBRACKET" "RIGHTBRACKET"
							"BACKSLASH" "SEMICOLON" "QUOTE" "COMMA" "PERIOD" "SLASH"
						] $arg1) // remainder of symbol keys
						if (> $arg3 -1) [
							if (||iskeyheld "LSHIFT" "RSHIFT") [
								set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									~ _ + { } | : "^"" < > ?
								] $arg3) $.UI_KBcaret 0)
							] [
								set $.UI_KBvarcur (strsplice $$.UI_KBvarcur (at [
									` - = "[" "]" \ ";" ' , . /
								] $arg3) $.UI_KBcaret 0)
							]
							++ .UI_KBcaret
							.UI_KBmillis = $getmillis
							do $.UI_KBvarmod
						]
					]
				]
			]
		]
	]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #10  OTHERS: clock(hand), server, activetable & optrow                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 1: hand color, 2: UI size multiplier, 3: hand angle
// 4: hand offset, 5: hand thickness, 6: hand base size
// 7: near-triangle length, 8: far-triangle length
UIclockhand = [
	loop+ n 4 5 [ [arg@n] = (*f $arg2 $[arg@n]) ]
	uioffset (*f (sin $arg3) $arg4) (*f (cos (+ $arg3 180)) $arg4) [
		UItriangle $arg1 0 $arg5 $arg7 (*f    $arg3      -1)
		UItriangle $arg1 0 $arg5 $arg8 (*f (+ $arg3 180) -1)
	]
	UIcircle $arg1 0 $arg6
]

// UIclock SIZE MINUTES* HOURS** TIME***
// *   : Boolean adjustment for the dot minute display surrounding the face.
//           0: 1 dot per minute. 1: 1 dot per hour.
// **  : Bitwise adjustment for numerals display. Controls type and amount.
//           0: all hours. 1: only cardinal hours.
//           2: all Roman numerals. 3: only cardinal Roman numerals.
// *** : Custom time. Seconds is smallest integer. Floats are milliseconds.
UIclock = [
	if $arg4 [] [ arg4 = (divf $getmillis 1000) ]
	uigroup [
		// ring 5-min points
		loop* n (? $arg2 30 6) (? $arg2 12 60) [
			uioffset (*f (sin $n) $arg1 0.975) (*f (cos $n) $arg1 0.975) [
				if (mod $n 30) [ UIcircle $c_line1 0 (*f $arg1 0.02) ] [
					UIcircle 0 0 (*f $arg1 0.025)
				]
			]
		]
		// ring numerals
		loop+ n 1 (? (& $arg3 1) 4 12) [
			arg2 = (- (* $n (? (& $arg3 1) -90 -30)) 180) // angle multiplier
			uioffset (*f (sin $arg2) $arg1 0.8) (*f (cos $arg2) $arg1 0.8) [
				arg2 = (*f $arg1 3.1) // text size multiplier
				case $arg3 0 [ uitext $n $arg2 ] 1 [ uitext (* $n 3) $arg2 ] 2 [
					uitext (at [I II III IV V VI VII VIII IX X XI XII] (- $n 1)) $arg2
				] 3 [ uitext (at [III VI IX XII] (- $n 1)) $arg2 ]
			]
		]
		// clock hands
		arg1 = (*f $arg1 0.5)
		UIclockhand $c_orange $arg1 (*f (divf $arg4 3600) 30)  0.65  0.050  0.13  0.58  0.63
		UIclockhand $c_blue   $arg1 (*f (divf $arg4   60)  6)  0.80  0.025  0.09  0.80  0.85
		UIclockhand $c_green  $arg1 (*f (modf $arg4   60)  6)  0.75  0.010  0.05  1.10  1.10
	]
]

// *** specialized for "servers" UI ***
// UIserver ID
UIserver = [
	arg2 = (&& [=s $connectedip (servinfoname $arg1)] [= $connectedport (servinfoport $arg1)])
	uitarget 0 (*f $uiPad:5XL 2) [
		style_button_hold1 d (? $arg2 d n) (? $uihover? d n)
		uiclamp*e
		uirelease [
			if (!= (servinfonumplayers $arg1) (servinfomaxplayers $arg1)) [
				if (> (servinfomastermode $arg1) 2) [
					.sb_connectid $arg1
					showui "dialog_serverconnect"
				] [ connectservinfo $arg1 ]
			]
		]
		uihlist $uiPad:L [
			uialign -1
			if $arg2 [
				uispace $uiPad:OL1 0 [ UItriangle $c_line2 0 $uiPad:4XL $uiPad:S 270 ]
			] [ uifill $uiPad:M ]
			uigroup [
				uifill $uiPad:DS
				uicroppedimage "data/interface/ui/mm.png" $uiPad:DSS $uiPad:DSS [@(*f (+ (servinfomastermode $arg1) 1) 48)p] 0 48p 1
				uispace 0 $uiPad:L [ uifonttext "wide.ol" (servinfomodename $arg1) 0.5 ]
				uialign- 0 1
			]
			uivlist $uiPad:S [
				uispace $uiPad:O4 0 [
					uihlist $uiPad:L [
						uifontcolortext "wide" "::" $c_gray 0.6
						uicolortext (servinfodesc $arg1) (? $arg2 $c_olive $c_white) 0.6
					]
				]
				uihlist $uiPad:L [
					if (m_timed (servinfomode $arg1)) [
						uifontcolortext "webdings" "i" $c_gray 0.65
						uifontcolortext "mono" (servinfotime $arg1) $c_green 0.55
					]
					if (servinfomap $arg1) [
						uifontcolortext "wide" ">" $c_gray 0.6
						uicolortext (servinfomap $arg1) $c_gray_l 0.55
					]
					uialign* -2 -1
				]
				uialign* -1
			]
		]
		uihlist $uiPad:L [
			uialign 1
			uifill $uiPad:SXL 0 [
				uivlist $uiPad:O3 [
					loopwhile i 5 [<= (servinfoping $arg1) (at "525 270 165 110 55" $i)] [ arg3 = (+ $i 1) ]
					uicroppedimage "data/interface/ui/conn.png" 0.025 0.025 [@(*f $arg3 64)p] 0 64p 1
					if (> (servinfoping $arg1) 999) [ uicolortext "999+" $c_gray 0.55 ] [
						uitext (servinfoping $arg1) 0.55
					]
				]
			]
			uifill $uiPad:XL $uiPad:6XL [
				uihlist $uiPad:O5- [
					uiclamp.y
					uifill (*f $uiPad:L 3.4) 0 [
						uifonttext "mono" (servinfonumplayers $arg1) 0.6
						uialign- 1 -1
					]
					uioffset 0 $uiPad:L- [
						uiclip 0 $uiPad:SXL [ uicolortext "/" $c_gray 1.3 ]
					] // text takes up a lot of vertical space, have to "cut" it
					uifill $uiPad:SXL 0 [
						uifontcolortext "mono" (servinfomaxplayers $arg1) $c_gray_l 0.55
						uialign- -1 1
					]
					uiclamp*y
				]
			]
		]
	]
]

// *** specialized for "servers" UI ***
// UIactivetable X Y TEXTSIZE [ "NAME" [ children ] [ action ] .. ] COLUMNS "tooltip"
UIactivetable = [
	uigrid $arg5 0 0 [
		UIsettip $arg6
		looplist3 n c a $arg4 [
			if (=s $n "") uifill [
				UIbutton "hold2" [
					c ; uitext $n $arg3
				] $arg1 $arg2 $a -1
			]
		]
	]
]

// *** specialized for "options" UI ***
// UIoptrow LT-text-offset? [ LT entries ]  RT-grid?  [ RT entries ]  [ disabled? cond ] "tip"
UIoptrow = [
	arg5 = (arg5)
	uitarget $uiPad:UM $uiPad:5XL [
		if $arg5 [ uicolor (|A 0x10 $c_red) 0 0 [ uiclamp.e ] ]
		uihlist 0 [
			arg1 = (+f (? $arg1 0 (+f $uiPad:2XL $uiPad:3XL)) $uiPad:L)
			uifill $arg1
			uifill (-f $uiPad:D6XL $arg1 $uiPad:3XL) 0 [ @arg2 ; uiclamp*x ]
			uifill $uiPad:2XL
			uifill $uiPad:D6XL 0 [
				if $arg3 [ uigrid $arg3 0 0 $arg4 ] [ arg4 ; uiclamp*x ]
				uialign* -1
			]
		]
		UIsettip $arg6
	]
]
