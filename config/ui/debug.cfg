
uiMenu "debug" [
	uivlist 0 [
		uiButton "hold2" [ uitext "Font Preview"     0.6 ] 0 $uiPad:6XL [ changeui "fonts_test" ]
		uiButton "hold2" [ uitext "Wave Function"    0.6 ] 0 $uiPad:6XL [ changeui "coswave_test" ]
		uiButton "hold2" [ uitext "Sliders"          0.6 ] 0 $uiPad:6XL [ changeui "slider_test" ]
		uiButton "hold2" [ uitext "Text/Int Fields"  0.6 ] 0 $uiPad:6XL [ changeui "field_test" ]
		uiButton "hold2" [ uitext "Mouse Drag Track" 0.6 ] 0 $uiPad:6XL [ changeui "drag_test" ]
		uiButton "hold2" [ uitext "Map Gamemode"     0.6 ] 0 $uiPad:6XL [ changeui "setmapmode" ]
		uiButton "hold2" [ uitext "Translation"      0.6 ] 0 $uiPad:6XL [ changeui "translate_test" ]
		uiButton "hold2" [ uitext "Sprite Debug"     0.6 ] 0 $uiPad:6XL [ changeui "sprite_test" ]
		uiclamp*x
	]
] [] [] [] [ uitext "Debug" ]

uiMenu "fonts_test" [
	uivlist $uiPad:L [
		uigrid 4 0 0 [
			looplist n (listdel $uiFontList "mono") [
				uiButton "hold2" [ uiRadio [=s $.font $n] ; uitext $n 0.6 ] 0 0 [
					.font = $n
					sleep 200 [ changeui "fonts_test" "main" ]
					sleep  25 [ exec "config/ui/debug.cfg" ]
				]
			]
			uiclamp*x
		] ; uiclamp-x
		uigrid 26 0 0 [
			looplist n [
				a b c d e f g h i j k l m n o
				p q r s t u v w x y z A B C D
				E F G H I J K L M N O P Q R S
				T U V W X Y Z 1 2 3 4 5 6 7 8
				9 0 ` ~ - _ = + { } "[" "]" \
				| ";" : ' "^"" , < . > / ? !
				"@" # $ % & * "(" ")"
			] [ uivlist 0 [ 
				uifonttext "mono" $n 1.5
				uifontcolortext $.font $n $c_yellow 1.2
			] ]
		]
	]
] [
	if (=s (getalias .font) "") [ .font = "webdings" ]
] [] [] [ uitext "Fonts Preview Debug" 0.8 ]

uiMenu "coswave_test" [
	uigrid 2 $uiPad:L $uiPad:L [
		uiHorSld .wavelength 200 10000 200 [] [] $uiPad:D3XL $uiPad:6XL
		uispace $uiPad:L 0 [
			uihlist 0 [
				uifonttext "mono" (uiCosWave $.wavelength) 0.5
				uifonttext "mono" (+s (+ (round (*f 100 (uiCosWave $.wavelength))) 0) "%") 0.8
			] ; uiclamp-x
		] ; uiclamp-x
		uicolor (uiCosWave:RGB 255 10 20 120 100 230 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (uiCosWave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
		uicolor (uiCosWave:INT 0x7864E6 0xFF0A14 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (uiCosWave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
	]
] [ .wavelength = 2000 ] [] [] [ uitext "Wave Function Debug" 0.8 ]

uiMenu "slider_test" [
	uihlist $uiPad:L [
		uifill 0.2 0.2 [
			uivlist 0 [
				uiclamp.e
				uiHorSpectrumSld a 0 255
				uiHorSld b 0 255 1
				uiHorColorSld c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
		uifill 0.2 0.2 [
			uihlist 0 [
				uiclamp.e
				uiVerSpectrumSld a 0 255
				uiVerSld b 0 255 1
				uiVerColorSld c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
	]
] [
	a = 0
	b = 0
	c = 0
] [] [] [ uitext "Sliders Debug" 0.8 ]

uiMenu "field_test" [
	uivlist 0 [
		uifill $uiPad:D6XL
		uiAdvFieldLA text1 24 0.6 "" [] []
		uiAdvFieldCA text2 24 0.6 "" [] []
		uiAdvFieldRA text3 24 0.6 "" [] []
		uiBar 1 0 $uiPad:L $uiPad:L
		uigrid 2 $uiPad:L 0 [
			uitext "NEG & POS" 0.6
			uiAdvIntFieldRA num1 -9999  9999 0.6 [] []
			uitext "NEG ONLY" 0.6
			uiAdvIntFieldRA num2 -9999    -1 0.6 [] []
			uitext "POS ONLY" 0.6
			uiAdvIntFieldRA num3     1  9999 0.6 [] []
			uiclamp*x
		]
		uiclamp*x
	]
] [
	text1 = "left-aligned text"
	text2 = "center-aligned text"
	text3 = "right-aligned text"
	num1 =  0
	num2 = -1
	num3 =  1
] [] [] [ uitext "Text/Int Fields Debug" 0.8 ]

uiMenu "drag_test" [
	uiBox "box n n n d n" $.box_size $.box_size [
		// XXX
	]
	uivlist 0 [
		uialign -1 -1
		uifonttext "mono" (format "Current X:%1 | Y:%2" (pad0 (pad0f $.x  4) 8) (pad0 (pad0f $.y  4) 8)) 0.5
		uifonttext "mono" (format "Saved X:%1 | Y:%2"   (pad0 (pad0f $.cx 4) 8) (pad0 (pad0f $.cy 4) 8)) 0.5
		uialign* 1
	]
	uicolor 0x80FF0000 $.obj_size $.obj_size
	uioffset (+f $.x $.box_edge) (+f $.y $.box_edge) [
		uialign -1 -1
		uicolor (? $uihover+? 0x10D080 0xFF8010) $.obj_size $.obj_size [
			if $uihold? [
				.x = (+f (*f $uimousex $uiaspect) $.cx)
				.y = (+f     $uimousey            $.cy)
				if (<=f (*f $.box_edge -1) $.x $.box_edge) [] [
					uilockcursorx ; .x = (clampf $.x (*f $.box_edge -1) $.box_edge)
				]
				if (<=f (*f $.box_edge -1) $.y $.box_edge) [] [
					uilockcursory ; .y = (clampf $.y (*f $.box_edge -1) $.box_edge)
				]
			] [ .cx = $.x ; .cy = $.y ]
		]
	]
] [
	.obj_size = 0.01
	.box_size = 0.8
	.box_edge = (-f (*f $.box_size 0.5) (*f $.obj_size 0.5))
	.x = 0.0
	.y = 0.0
	.cx = 0.0
	.cy = 0.0
] [] [] [ uitext "Mouse Drag Track Debug" 0.8 ]

uiMenu "setmapmode" [
	uigrid 8 $uiPad:L 0 [
		loop n (listlen $modelist) [
			if $n [ uitext (at $modelist $n) 0.6 ] uifill
		]
		loop+* i 1 2 (div (listlen $defmaptable) 2) [
			uiButton "none" [ uitext (at $defmaptable (- $i 1)) 0.6 ]
			loop n (- (listlen $modelist) 1) [
				uiButtonArea "hold2" $uiPad:5XL $uiPad:5XL [
					uialign 0
					uiCheckbox (& (at $defmaptable $i) (<< 1 $n))
					uirelease [
						listsplice= $defmaptable (^ (at $defmaptable $i) (<< 1 $n)) $i 1
					]
				]
			]
		]
	]
] [] [] [] [ uitext "Map Gamemode Debug" 0.8 ]

uiMenu "translate_test" [
	uivlist 0 [
		uifill $uiPad:UM
		uiOptionSld uiLanguage [
			0 @(#l "English" 0) -1
			1 @(#l "Italian" 0) -1
			2 @(#l "German"  0) -1
			3 @(#l "French"  0) -1
			4 @(#l "Spanish" 0) -1
		]
		uiclamp-e
		uifill 0 $uiPad:3XL
		uitext (#l "This is a short line of amazing text!") 0.6
		uitext (#l "Five dogs were harmed in the making of this game.") 0.6
		uitext (#l "You must believe in the heart of the cards.") 0.6
		uitext (#l "This line of text is intentionally untranslated.") 0.6
	]
] [] [] [] [ uitext "Translation Debug" 0.8 ]

// arg1 : ID       -- identifier of a particular sprite, used for associated vars
// arg2 : TEXCMD   -- tex commands to manipulate sprite texture with
// arg3 : PATH     -- path to the spritesheet texture
// arg4 : SIZE     -- size of the displayed tile, is adjusted by aspect ratio of W/H
// arg5 : UI X     -- width of the display widget, if 0 assumes same as SIZE
// arg6 : UI Y     -- height of the display widget, if 0 assumes the same as WIDTH
// arg7 : W(px)    -- width of sprite tile in pixels
// arg8 : H(px)    -- height of sprite tile in pixels, if 0 assumes same as X
// arg9 : MS       -- frametime (ms) before the next tile is displayed
// arg10: TRIGGER  -- custom trigger condition to enable the sprite animation
// arg11: LOOP     -- amount of times to loop animation, 0 = inf
// arg12: SKIP     -- skips N tiles from the beginning of the sheet
// arg13: CONT     -- skips N tiles from the end of the sheet if < 0, otherwise counts N from SKIP
// arg14: FLIP     -- flips the animation direction once it reaches the end
// arg15: CHILDREN -- space for additional UI actions that may be desired
uiDrawSpriteTiled = [
	sleep 1 [ if (! (uivisible @uiname)) [ disableSprite @@arg1 ] ]
	if $arg4 [] [ arg4 = 0.010 ]
	if $arg5 [] [ arg5 = $arg4 ]
	if $arg6 [] [ arg6 = $arg5 ]
	if $arg8 [] [ arg8 = $arg7 ]
	uitarget $arg5 $arg6 [
		cases $arg10 "" [ uiHoverOnce [
			initSprite $arg1 $arg3 $arg9 $arg11 $arg4 $arg12 $arg13 $arg14 $arg7 $arg8
		] ] 0 [ disableSprite $arg1 ] () [ if (isSpriteLive $arg1) [] [
			initSprite $arg1 $arg3 $arg9 $arg11 $arg4 $arg12 $arg13 $arg14 $arg7 $arg8
		] ] ; doargs $arg15
		if (isSpriteLive $arg1) [
			arg1 = [sprite:@arg1]
			local  tile.num  tile.xno  tile.yno  tile.all  tile.cur  tile.rep
			tile.num = (+ (divf (- $getmillis $[@arg1.time]) $[@arg1.rate]))
			tile.xno = (div (gettexw $[@arg1.path]) $[@arg1.w])
			tile.yno = (div (gettexh $[@arg1.path]) $[@arg1.h])
			tile.all = (- (* $tile.xno $tile.yno) $[@arg1.cutl])
			if (< $[@arg1.cutr] 1) [
				tile.all = (max 1 (+ $tile.all $[@arg1.cutr]))
			] [ tile.all = (min $tile.all $[@arg1.cutr]) ]
			if $[@arg1.flip] [
				push tile.all (* (- $tile.all 1) 2) [
					tile.rep = (div $tile.num $tile.all)
					tile.cur = (mod $tile.num $tile.all)
					if (>= $tile.cur @tile.all) [
						tile.cur = (- $tile.all $tile.cur)
					]
				]
			] [
				tile.rep = (div $tile.num $tile.all)
				tile.cur = (mod $tile.num $tile.all)
			]
			if (|| [! $[@arg1.loop]] [< $tile.rep $[@arg1.loop]] [! $tile.cur]) [
				local x y ; x = $arg4 ; y = $arg4
				if (> $arg7 $arg8) [ y = (*f (divf $arg8 $arg7) $y) ]
				if (< $arg7 $arg8) [ x = (*f (divf $arg7 $arg8) $x) ]
				tile.cur = (+ $tile.cur $[@arg1.cutl])
				do (format [ uitiledimage "%5<crop:%8p,%9p,%2p,%3p>%4" %6 %7 ; uiclamp-e ] [
				] $[@arg1.w] $[@arg1.h] $[@arg1.path] $arg2 $x $y (
					* $[@arg1.w] (mod $tile.cur $tile.xno) ) (
					* $[@arg1.h] (div $tile.cur $tile.xno) ) )
			] [ disableSprite @@arg1 ]
		]
	]
]

// arg1 : ID       -- identifier of a particular sprite, used for associated vars
// arg2 : TEXCMD   -- tex commands to manipulate sprite texture with
// arg3 : PATH     -- path to the spritesheet texture
// arg4 : SIZE     -- size the display will occupy, the aspect ratio is retained
// arg5 : W(px)    -- width of sprite tile in pixels
// arg6 : H(px)    -- height of sprite tile in pixels, if 0 assumes same as X
// arg7 : MS       -- frametime (ms) before the next tile is displayed
// arg8 : TRIGGER  -- custom trigger condition to enable the sprite animation
// arg9 : LOOP     -- amount of times to loop animation, 0 = inf
// arg10: SKIP     -- skips N tiles from the beginning of the sheet
// arg11: CONT     -- skips N tiles from the end of the sheet if < 0, otherwise counts N from SKIP
// arg12: FLIP     -- flips the animation direction once it reaches the end
// arg13: CHILDREN -- space for additional UI actions that may be desired
uiDrawSprite = [
	sleep 1 [ if (! (uivisible @uiname)) [ disableSprite @@arg1 ] ]
	if $arg4 [] [ arg4 = 0.010 ]
	if $arg6 [] [ arg6 = $arg5 ]
	local x y ; x = $arg4 ; y = $arg4
	if (> $arg5 $arg6) [ y = (*f (divf $arg6 $arg5) $y) ]
	if (< $arg5 $arg6) [ x = (*f (divf $arg5 $arg6) $x) ]
	uitarget $x $y [
		cases $arg8 "" [ uiHoverOnce [
			initSprite $arg1 $arg3 $arg7 $arg9 $arg4 $arg10 $arg11 $arg12 $arg5 $arg6
		] ] 0 [ disableSprite $arg1 ] () [ if (isSpriteLive $arg1) [] [
			initSprite $arg1 $arg3 $arg7 $arg9 $arg4 $arg10 $arg11 $arg12 $arg5 $arg6
		] ] ; doargs $arg13
		if (isSpriteLive $arg1) [
			arg1 = [sprite:@arg1]
			local  tile.num  tile.xno  tile.yno  tile.all  tile.cur  tile.rep
			tile.num = (div (- $getmillis $[@arg1.time]) $[@arg1.rate])
			tile.xno = (div (gettexw $[@arg1.path]) $[@arg1.w])
			tile.yno = (div (gettexh $[@arg1.path]) $[@arg1.h])
			tile.all = (- (* $tile.xno $tile.yno) $[@arg1.cutl])
			if (< $[@arg1.cutr] 1) [
				tile.all = (max 1 (+ $tile.all $[@arg1.cutr]))
			] [ tile.all = (min $tile.all $[@arg1.cutr]) ]
			if $[@arg1.flip] [
				push tile.all (* (- $tile.all 1) 2) [
					tile.rep = (div $tile.num $tile.all)
					tile.cur = (mod $tile.num $tile.all)
					if (>= $tile.cur @tile.all) [
						tile.cur = (- $tile.all $tile.cur)
					]
				]
			] [
				tile.rep = (div $tile.num $tile.all)
				tile.cur = (mod $tile.num $tile.all)
			]
			if (|| [! $[@arg1.loop]] [< $tile.rep $[@arg1.loop]] [! $tile.cur]) [
				tile.cur = (+ $tile.cur $[@arg1.cutl])
				do (format [ uicroppedimage "%5%4" 0 0 %6p %7p %2p %3p ; uiclamp-e ] [
				] $[@arg1.w] $[@arg1.h] $[@arg1.path] $arg2 (
					* $[@arg1.w] (mod $tile.cur $tile.xno) ) (
					* $[@arg1.h] (div $tile.cur $tile.xno) ) )
			] [ disableSprite @@arg1 ]
		]
	]
]

uiMenu "sprite_test" [
	uigrid 2 $uiPad:L $uiPad:L [
		//                       ID TEXCMD                     PATH        SIZE  X  Y  W(px)  H(px)   MS  [trig]  Loops  xL  xR  Flip  [act]
		uiDrawSpriteTiled   "test1"     "" "data/interface/debug/1" $uiPad:D5XL  0  0   512      0    50      []      1   0   0     0     []
		uiDrawSpriteTiled   "test2"     "" "data/interface/debug/2" $uiPad:D5XL  0  0    64      0   250      []      0  10   5     0     []
		uiDrawSpriteTiled   "test3"     "" "data/interface/debug/2" $uiPad:D5XL  0  0    64      0   400      []      1  10 -10     1     []
		uiDrawSpriteTiled   "test4"     "" "data/interface/debug/2" $uiPad:D5XL  0  0   128     64   500      []      0   0   0     0     []
	]
] [] [] [] [ uitext "Sprite Debug" 0.8 ]


restartSprite = [ if (!=s $arg1 "") [ [sprite:@arg1.time] = (abs $getmillis) ] ]
disableSprite = [ if (!=s $arg1 "") [ [sprite:@arg1.time] = 0 ] ]
setSpriteProp = [ if (=s $arg1 $arg2 "") [] [ [sprite:@arg1.@arg2] = $arg3 ] ]
getSpriteProp = [ getalias [sprite:@arg1.@arg2] ]
isSpriteLive  = [ getalias [sprite:@arg1.time] ]
!isSpriteLive = [ ! (isSpriteLive $arg1) ]
initSprite = [
	if (!=s $arg1 "") [
		[sprite:@arg1.path]  = (+s $arg2 ".png")
		[sprite:@arg1.rate]  = (maxf 1 $arg3)
		[sprite:@arg1.time]  = (abs $getmillis)
		[sprite:@arg1.loop]  = (abs $arg4)
		[sprite:@arg1.size]  = (abs $arg5)
		[sprite:@arg1.cutl]  = (abs $arg6)
		[sprite:@arg1.cutr]  = (+ $arg7 0)
		[sprite:@arg1.flip]  = (!= $arg8 0)
		if (> $numargs 8) [
			if $arg10 [] [ arg10 = $arg9 ]
			[sprite:@arg1.w] = (max 1 $arg9)
			[sprite:@arg1.h] = (max 1 $arg10)
		]
	] [ error "ID is null!" ]
]
enableSprite  = [
	if (!=s $arg1 "") [
		if (< $numargs 2) [ arg2 = 1 ] [
			if (> $arg2 0) [] [ arg2 = -1 ] 
		]
		[sprite:@arg1.time] = $getmillis
		[sprite:@arg1.loop] = $arg2
	]
]


// CubeScript code benchmark.
// Repeats the code a number of times until the elapsed time is at least 0.1 seconds,
// then calculates the average time per iteration.
codebench = [
    local _start_ms _end_ms _elapsed_ms _us_per_iteration _iterations

    _elapsed_ms = 0

    // Start with 10 iterations
    _iterations = 10

    // Keep repeating and increasing the number of iterations until
    // the elapsed time is at least 0.1 seconds for more accurate results
    nodebug [
	    while [ < $_elapsed_ms 100 ] [
	        _start_ms = (getmillis -1)
	        loop i $_iterations [@@@arg1]
	        _end_ms = (getmillis -1)

	        _elapsed_ms = (- $_end_ms $_start_ms)
	        _iterations = (* $_iterations 10)
	    ]
    ]

    _elapsed_ms = (-f $_end_ms $_start_ms)
    _ms_per_iteration = (divf $_elapsed_ms $_iterations)
    _elapsed_ms = (divf $_elapsed_ms 1000)
    echo "----------------------------------------------------"
    echo (+s "^f7Codebench: ^f2" (*f $_ms_per_iteration 1000000) " ^f7ns per iteration (" $_ms_per_iteration "ms)")
    echo (+s "^f9" $arg1)
]
