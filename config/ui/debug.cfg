
UImenu "debug" [
	uivlist 0 [
		UIbutton "hold2" [ uitext "Webdings Font"    0.6 ] 0 $uiPad:6XL [ changeui "symbols_test" ]
		UIbutton "hold2" [ uitext "Wave Function"    0.6 ] 0 $uiPad:6XL [ changeui "coswave_test" ]
		UIbutton "hold2" [ uitext "Sliders"          0.6 ] 0 $uiPad:6XL [ changeui "slider_test" ]
		UIbutton "hold2" [ uitext "Text/Int Fields"  0.6 ] 0 $uiPad:6XL [ changeui "field_test" ]
		UIbutton "hold2" [ uitext "Mouse Drag Track" 0.6 ] 0 $uiPad:6XL [ changeui "drag_test" ]
		UIbutton "hold2" [ uitext "Map Gamemode"     0.6 ] 0 $uiPad:6XL [ changeui "setmapmode" ]
		UIbutton "hold2" [ uitext "Translation"      0.6 ] 0 $uiPad:6XL [ changeui "translate_test" ]
		UIbutton "hold2" [ uitext "Line Tree"        0.6 ] 0 $uiPad:6XL [ changeui "linetree_test" ]
		UIbutton "hold2" [ uitext "Sprite Debug"        0.6 ] 0 $uiPad:6XL [ changeui "sprite_test" ]
		uiclamp*x
	]
] [] [] [] [ uitext "Debug" ]

UImenu "symbols_test" [
	uigrid 26 0 0 [
		looplist n [
			a b c d e f g h i j k l m n o
			p q r s t u v w x y z A B C D
			E F G H I J K L M N O P Q R S
			T U V W X Y Z 1 2 3 4 5 6 7 8
			9 0 ` ~ - _ = + { } "[" "]" \
			| ";" : ' "^"" , < . > / ? !
			"@" # $ % & * "(" ")"
		] [
			uivlist 0 [ 
				uifonttext "mono" $n 1.5
				uifontcolortext "webdings" $n $c_yellow 1.5
			]
		]
	]
] [] [] [] [ uitext "Webdings Debug" 0.8 ]

UImenu "coswave_test" [
	uigrid 2 $uiPad:L $uiPad:L [
		UIhslider .wavelength 200 10000 200 [] [] $uiPad:D3XL $uiPad:6XL
		uispace $uiPad:L 0 [
			uihlist 0 [
				uifonttext "mono" (UIcoswave $.wavelength) 0.5
				uifonttext "mono" (concatword (+ (round (*f 100 (UIcoswave $.wavelength))) 0) "^%") 0.8
			] ; uiclamp-x
		] ; uiclamp-x
		uicolor (UIcoswave:RGB 255 10 20 120 100 230 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (UIcoswave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
		uicolor (UIcoswave:INT 0x7864E6 0xFF0A14 $.wavelength) $uiPad:D3XL $uiPad:D5XL [
			uivlist 0 [
				uiline $c_white ; uiclamp-x
				uifill 0 (*f (UIcoswave $.wavelength) $uiPad:D5XL)
			] ; uiclamp-x ; uialign- 0 1
		]
	]
] [ .wavelength = 2000 ] [] [] [ uitext "Wave Function Debug" 0.8 ]

UImenu "slider_test" [
	uihlist $uiPad:L [
		uifill 0.2 0.2 [
			uivlist 0 [
				uiclamp.e
				UIhspectrumslider a 0 255
				UIhslider b 0 255 1
				UIhcolorslider c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
		uifill 0.2 0.2 [
			uihlist 0 [
				uiclamp.e
				UIvspectrumslider a 0 255
				UIvslider b 0 255 1
				UIvcolorslider c 0 255 0xFF0000 0x0000FF
				uiclamp*e
			]
		]
	]
] [
	a = 0
	b = 0
	c = 0
] [] [] [ uitext "Sliders Debug" 0.8 ]

UImenu "field_test" [
	uivlist 0 [
		uifill $uiPad:D6XL
		UIadvfieldLA text1 24 0.6 "" [] []
		UIadvfieldCA text2 24 0.6 "" [] []
		UIadvfieldRA text3 24 0.6 "" [] []
		UIbar 1 0 $uiPad:L $uiPad:L
		uigrid 2 $uiPad:L 0 [
			uitext "NEG & POS" 0.6
			UIadvfieldRAint num1 -9999  9999 0.6 [] []
			uitext "NEG ONLY" 0.6
			UIadvfieldRAint num2 -9999    -1 0.6 [] []
			uitext "POS ONLY" 0.6
			UIadvfieldRAint num3     1  9999 0.6 [] []
			uiclamp*x
		]
		uiclamp*x
	]
] [
	text1 = "left-aligned text"
	text2 = "center-aligned text"
	text3 = "right-aligned text"
	num1 =  0
	num2 = -1
	num3 =  1
] [] [] [ uitext "Text/Int Fields Debug" 0.8 ]

UImenu "drag_test" [
	UIbox "box n n n d n" $.box_size $.box_size [
		// XXX
	]
	uivlist 0 [
		uialign -1 -1
		uifonttext "mono" (format "Current X:%1 | Y:%2" (pad0 (pad0f $.x  4) 8 " ") (pad0 (pad0f $.y  4) 8 " ")) 0.5
		uifonttext "mono" (format "Saved X:%1 | Y:%2"   (pad0 (pad0f $.cx 4) 8 " ") (pad0 (pad0f $.cy 4) 8 " ")) 0.5
		uialign* 1
	]
	uicolor 0x80FF0000 $.obj_size $.obj_size
	uioffset (+f $.x $.box_edge) (+f $.y $.box_edge) [
		uialign -1 -1
		uicolor (? $uihover+? 0x10D080 0xFF8010) $.obj_size $.obj_size [
			if $uihold? [
				.x = (+f (precf (*f $uimousetrackx $uiaspect) 4) $.cx)
				.y = (+f (precf     $uimousetracky            4) $.cy)
				if (<=f (!f $.box_edge) $.x $.box_edge) [] [
					uilockcursorx ; .x = (clampf $.x (!f $.box_edge) $.box_edge)
				]
				if (<=f (!f $.box_edge) $.y $.box_edge) [] [
					uilockcursory ; .y = (clampf $.y (!f $.box_edge) $.box_edge)
				]
			] [ .cx = $.x ; .cy = $.y ]
		]
	]
] [
	.obj_size = 0.01
	.box_size = 0.8
	.box_edge = (-f (*f $.box_size 0.5) (*f $.obj_size 0.5))
	.x = 0.0
	.y = 0.0
	.cx = 0.0
	.cy = 0.0
] [] [] [ uitext "Mouse Drag Track Debug" 0.8 ]

UImenu "setmapmode" [
	uigrid 8 $uiPad:L 0 [
		loop n (listlen $modelist) [
			if $n [ uitext (at $modelist $n) 0.6 ] uifill
		]
		loop+* i 1 2 (div (listlen $defmaptable) 2) [
			UIbutton "none" [ uitext (at $defmaptable (- $i 1)) 0.6 ]
			loop n (- (listlen $modelist) 1) [
				UIbuttonarea "hold2" $uiPad:5XL $uiPad:5XL [
					uialign 0
					UIcheckbox (& (at $defmaptable $i) (<< 1 $n))
					uirelease [
						listsplice= $defmaptable (^ (at $defmaptable $i) (<< 1 $n)) $i 1
					]
				]
			]
		]
	]
] [] [] [] [ uitext "Map Gamemode Debug" 0.8 ]

UImenu "translate_test" [
	uivlist 0 [
		uifill $uiPad:UM
		UIoptionslider .UI_lang [
			0 @(#l "English" 0) -1
			1 @(#l "Italian" 0) -1
			2 @(#l "German"  0) -1
			3 @(#l "French"  0) -1
			4 @(#l "Spanish" 0) -1
		]
		uiclamp-e
		uifill 0 $uiPad:3XL
		uitext (#l "This is a short line of amazing text!") 0.6
		uitext (#l "Five dogs were harmed in the making of this game.") 0.6
		uitext (#l "You must believe in the heart of the cards.") 0.6
		uitext (#l "This line of text is intentionally untranslated.") 0.6
	]
] [] [] [] [ uitext "Translation Debug" 0.8 ]

UImenu "linetree_test" [
	lines = [
		uifill $uiPad:5XL $uiPad:5XL [
			UIbar 1 0 $uiPad:M 0 $c_orange ; uiclamp-x
			UIbar 0 1 $uiPad:M 0 $c_orange ; uiclamp-y
			uialign* -1
		] ; uialign- -1
	]
	lines_end = [
		uifill 0 $uiPad:5XL [
			uifill $uiPad:5XL $uiPad:2XL [
				UIbar 1 0 $uiPad:M 0 $c_orange ; uiclamp-x ; uialign- -1 1
				UIbar 0 1 $uiPad:M 0 $c_orange ; uiclamp-y ; uialign- -1
			] ; uialign- -1 -1
		]
	]
	spacer = [ uifill 0 $uiPad:2XL [ UIbar 0 1 $uiPad:M 0 $c_orange ] ; uialign- -1 ]
	titler = [
		UIbox "box d d n d n n" 0 $uiPad:5XL [
			uiclamp.x
			uifont "wide" [ uitext (concat "" $arg1 "") 0.75 ]
		]
	]
	bindrow = [
		uitarget 0.7 0 [
			lines@(? $arg3 _end)
			uitext (format "    %2%1" $arg1 (? $uihover? "^f2" "^f7")) 0.55
			uialign* -1
			UIbutton "hold1" [ uitext $arg2 0.55 ] $uiPad:D4XL ; uialign- 1
		]
	]
	uivlist 0 [
		uifill 0.7
		uiclamp.x
		titler "Graphics"
		spacer
		bindrow "Cycle Aspect Ratio" "Keyboard/F6"
		bindrow "Cycle Deinterlace Mode" ""
		bindrow "Cycle Hardware Mipmapping" ""
		spacer
		bindrow "Decrease Upscale Multiplier" ""
		bindrow "Increase Upscale Multiplier" "" 1
		UIbar 0 0 0 $uiPad:XL
		titler "System"
		spacer
		bindrow "Decrease Target Speed" ""
		bindrow "Increase Target Speed" ""
		spacer
		bindrow "Toggle Pause" "Keyboard/Space"
		bindrow "Toggle Frame Limit" "Keyboard/F4"
		bindrow "Toggle Slow Motion" ""
		bindrow "Toggle Turbo" "Keyboard/Tab" 1
	]
] [] [] [] [ uitext "Line Tree Debug" 0.8 ]

// arg1 : ID       -- identifier of a particular sprite, used for associated vars
// arg2 : PATH     -- path to the spritesheet texture
// arg3 : SIZE     -- size the display will occupy, the aspect ratio is retained
// arg4 : X        -- width of sprite tile in pixels
// arg5 : Y        -- height of sprite tile in pixels, if 0 assumes same as X
// arg6 : TRIGGER  -- execute instead of the default hover trigger *currently wip?*
// arg7 : MS       -- frametime (ms) before the next tile is displayed
// arg8 : LOOP     -- amount of times to loop animation, 0 = inf
// arg9 : SKIP     -- skips N tiles from the beginning of the sheet
// arg10: CONT     -- skips N tiles from the end of the sheet if < 0, otherwise
//                        it counts N tiles past the SKIP value
// arg11: CHILDREN -- space for additional UI actions that may be desired
UIdrawsprite = [
	sleep 1 [ if (! (uivisible @uiname)) [ disableSprite @@arg1 ] ]
	local x ; x = (relSpriteW "" $arg3 $arg4 $arg5)
	local y ; y = (relSpriteH "" $arg3 $arg4 (? $arg5 $arg5 $arg4))
	uitarget $x $y [
		if (!=s $arg6 "") $arg6 [
			UIhoveronce [ initSprite $arg1 $arg2 $arg7 $arg8 $arg3 $arg9 $arg10 $arg4 $arg5 ]
		] ; doargs $arg11 ; arg1 = [sprite:@arg1]
		if (getalias [@arg1.loop]) [
			local  tile.num  tile.xno  tile.yno  tile.all
			tile.num = (div (- $getmillis $[@arg1.time]) $[@arg1.rate])
			tile.xno = (div (gettexw $[@arg1.path]) $[@arg1.w])
			tile.yno = (div (gettexh $[@arg1.path]) $[@arg1.h])
			if (< $[@arg1.cutr] 1) [
				tile.all = (- (* $tile.xno $tile.yno) $[@arg1.cutl] (abs $[@arg1.cutr]))
			] [ tile.all = $[@arg1.cutr] ]
			if (|| [< $[@arg1.loop] 0] [> $[@arg1.loop] (div $tile.num $tile.all)]) [
				local  tile.cur  posx  posy
				tile.cur = (+ (mod $tile.num $tile.all) $[@arg1.cutl])
				posx = (* $[@arg1.w] (mod $tile.cur $tile.xno))
				posy = (* $[@arg1.h] (div $tile.cur $tile.xno))
				do (format [ uicroppedimage %6 0 0 %2p %3p %4p %5p ; uiclamp-e ] [
				] $posx $posy $[@arg1.w] $[@arg1.h] $[@arg1.path])
			] [ disableSprite @@@@arg1 ]
		]
	]
]

UImenu "sprite_test" [
	uigrid 2 $uiPad:L $uiPad:L [
		//               ID                          PATH         SIZE    X    Y  [trig]   MS  Loops  xL  xR  [act]
		UIdrawsprite "test1"  "data/interface/debug/1.png" $uiPad:D5XL  512    0      []   50      1   0   0     []
		UIdrawsprite "test2"  "data/interface/debug/2.png" $uiPad:D5XL   64    0      []  250      0  10   5     []
		UIdrawsprite "test3"  "data/interface/debug/2.png" $uiPad:D5XL   64    0      []  250      0   5  -5     []
		UIdrawsprite "test4"  "data/interface/debug/2.png" $uiPad:D5XL  128   64      []  500      0   0   0     []
		uialign* -2 -2
	]
] [] [] [] [ uitext "Sprite Debug" 0.8 ]


restartSprite = [ [sprite:@arg1.time] = $getmillis ]
getSpriteProp = [ getalias [sprite:@arg1.@arg2] ]
setSpriteProp = [ [sprite:@arg1.@arg2] = $arg3 ]
isSpriteLive  = [ getalias [sprite:@arg1.time] ]
initSprite = [
	if (findfile $arg2) [
		[sprite:@arg1.path]  = $arg2
		[sprite:@arg1.rate]  = (max 1 $arg3)
		[sprite:@arg1.time]  = (abs $getmillis)
		[sprite:@arg1.loop]  = (? (> $arg4 0) $arg4 -1)
		[sprite:@arg1.size]  = (abs $arg5)
		[sprite:@arg1.cutl]  = (abs $arg6)
		[sprite:@arg1.cutr]  = $arg7
		if (> $numargs 7) [
			[sprite:@arg1.w] = (max 1 $arg8)
			[sprite:@arg1.h] = (max 1 (? $arg9 $arg9 $arg8))
		]
	] [ error (format "Spritesheet (%1) not found!" $arg2) ]
]
disableSprite = [
	[sprite:@arg1.time] = 0
	[sprite:@arg1.loop] = 0
]
enableSprite  = [
	arg2 = (if (> $numargs 1) [ ? (> $arg2 0) $arg2 -1 ] [ result 1 ])
	[sprite:@arg1.time] = $getmillis
	[sprite:@arg1.loop] = $arg2
]
relSpriteW = [	
	if $arg2 [] [ arg2 = (getSpriteProp $arg1 size) ]
	if $arg3 [] [ arg3 = (getSpriteProp $arg1 w) ]
	if $arg4 [] [ arg4 = (getSpriteProp $arg1 h) ]
	*f $arg2 (if (>f $arg3 $arg4) [ result 1 ] [ divf $arg3 $arg4 ])
]
relSpriteH = [
	if $arg2 [] [ arg2 = (getSpriteProp $arg1 size) ]
	if $arg3 [] [ arg3 = (getSpriteProp $arg1 w) ]
	if $arg4 [] [ arg4 = (getSpriteProp $arg1 h) ]
	*f $arg2 (if (>f $arg4 $arg3) [ result 1 ] [ divf $arg4 $arg3 ])
]
