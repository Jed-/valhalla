
///////////////////////////////////////////////////////////////////////////////
//  Custom Shaders                                                           //
///////////////////////////////////////////////////////////////////////////////

// fullscreen 9-pass 5x5 rhombus-shaped blur shader
//shader 0 "fsblur" [
//	// Vertex Shader
//	attribute vec4 vvertex;
//	uniform vec4 screentexcoord0;
//	#define vtexcoord0 (vvertex.xy * screentexcoord0.xy + screentexcoord0.zw)
//	varying vec2 texcoord0, texcoord1, texcoord2, texcoord3, texcoord4, \
//							texcoord5, texcoord6, texcoord7, texcoord8;
//	void main(void) {
//		gl_Position = vvertex;
//		texcoord0 = vtexcoord0;
//		texcoord1 = vtexcoord0 + vec2(-2.5,  0.0);
//		texcoord2 = vtexcoord0 + vec2( 2.5,  0.0);
//		texcoord3 = vtexcoord0 + vec2( 0.0, -2.5);
//		texcoord4 = vtexcoord0 + vec2( 0.0,  2.5);
//
//		texcoord5 = vtexcoord0 + vec2(-1.0, -1.0);
//		texcoord6 = vtexcoord0 + vec2( 1.0, -1.0);
//		texcoord7 = vtexcoord0 + vec2(-1.0,  1.0);
//		texcoord8 = vtexcoord0 + vec2( 1.0,  1.0);
//	}
//] [
//	// Fragment Shader
//	uniform sampler2DRect tex0;
//	varying vec2 texcoord0, texcoord1, texcoord2, texcoord3, texcoord4, \
//							texcoord5, texcoord6, texcoord7, texcoord8;
//	fragdata(0) vec4 fragcolor;
//	void main(void) {
//		fragcolor  = 0.260 * texture2DRect(tex0, texcoord0);
//		fragcolor += 0.055 * ( \
//			texture2DRect(tex0, texcoord1) + \
//			texture2DRect(tex0, texcoord2) + \
//			texture2DRect(tex0, texcoord3) + \
//			texture2DRect(tex0, texcoord4)   \
//		);
//		fragcolor += 0.130 * ( \
//			texture2DRect(tex0, texcoord5) + \
//			texture2DRect(tex0, texcoord6) + \
//			texture2DRect(tex0, texcoord7) + \
//			texture2DRect(tex0, texcoord8)   \
//		);
//	}
//]

// fullscreen 9-pass 5x5 rhombus-shaped blur shader
shader 0 "fsblur" [
    // Vertex Shader
    attribute vec4 vvertex;
    uniform vec4 screentexcoord0;
    #define vtexcoord0 (vvertex.xy * screentexcoord0.xy + screentexcoord0.zw)
    varying vec2 texcoord[9];
    void main(void) {
        gl_Position = vvertex;
        const vec2 offset[8] = vec2[](
            vec2(-2.5,  0.0), vec2( 2.5,  0.0),
            vec2( 0.0, -2.5), vec2( 0.0,  2.5),
            vec2(-1.0, -1.0), vec2( 1.0, -1.0),
            vec2(-1.0,  1.0), vec2( 1.0,  1.0)
        );
        texcoord[0] = vtexcoord0;
        for (int i = 0; i < 8; i++) {
            texcoord[i+1] = vtexcoord0 + offset[i];
        }
    }
] [
    // Fragment Shader
    uniform sampler2DRect tex0;
    varying vec2 texcoord[9];
    const float weights[9] = float[](
        0.260, // center weight
        0.055, 0.055, 0.055, 0.055,
        0.130, 0.130, 0.130, 0.130
    );
    fragdata(0) vec4 fragcolor;
    void main(void) {
        fragcolor = vec4(0.0);
        for (int i = 0; i < 9; i++) {
            fragcolor += weights[i] * texture2DRect(tex0, texcoord[i]);
        }
    }
]

// fullscreen nearest-neighbor pixelation shader
shader 0 "pixelate" [
    // Vertex Shader
    attribute vec4 vvertex;
    uniform vec4 screentexcoord0;
    #define vtexcoord0 (vvertex.xy * screentexcoord0.xy + screentexcoord0.zw)
    varying vec2 texcoord0;
    void main(void) {
        gl_Position = vvertex;
        texcoord0 = vtexcoord0;
    }
] [
    // Fragment Shader
    uniform sampler2DRect tex0;
    uniform vec4 params;
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    void main(void) {
        vec2 floorcoord = vec2(floor(texcoord0.x / params.x), floor(texcoord0.y / params.y));
        fragcolor = texture2DRect(tex0, params.xy * vec2(
            floor(texcoord0.x / params.x),
            floor(texcoord0.y / params.y)
        ));
    }
]
